"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8086],{8893:function(e,t,i){i.d(t,{Hn:function(){return VRMLookAtLoaderPlugin},XX:function(){return VRMLoaderPlugin},bN:function(){return r},ck:function(){return VRMUtils},cw:function(){return VRMLookAt},j$:function(){return f}});var n=i(9477);/*!
 * @pixiv/three-vrm v2.1.2
 * VRM file loader for three.js.
 *
 * Copyright (c) 2019-2024 pixiv Inc.
 * @pixiv/three-vrm is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 *//*!
 * @pixiv/three-vrm-core v2.1.2
 * The implementation of core features of VRM, for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2024 pixiv Inc.
 * @pixiv/three-vrm-core is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */let VRMExpression=class VRMExpression extends n.Tme{get overrideBlinkAmount(){return"block"===this.overrideBlink?0<this.weight?1:0:"blend"===this.overrideBlink?this.weight:0}get overrideLookAtAmount(){return"block"===this.overrideLookAt?0<this.weight?1:0:"blend"===this.overrideLookAt?this.weight:0}get overrideMouthAmount(){return"block"===this.overrideMouth?0<this.weight?1:0:"blend"===this.overrideMouth?this.weight:0}constructor(e){super(),this.weight=0,this.isBinary=!1,this.overrideBlink="none",this.overrideLookAt="none",this.overrideMouth="none",this._binds=[],this.name=`VRMExpression_${e}`,this.expressionName=e,this.type="VRMExpression",this.visible=!1}addBind(e){this._binds.push(e)}applyWeight(e){var t;let i=this.isBinary?this.weight<=.5?0:1:this.weight;i*=null!==(t=null==e?void 0:e.multiplier)&&void 0!==t?t:1,this._binds.forEach(e=>e.applyWeight(i))}clearAppliedWeight(){this._binds.forEach(e=>e.clearAppliedWeight())}};function __awaiter$6(e,t,i,n){return new(i||(i=Promise))(function(r,o){function fulfilled(e){try{step(n.next(e))}catch(e){o(e)}}function rejected(e){try{step(n.throw(e))}catch(e){o(e)}}function step(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(fulfilled,rejected)}step((n=n.apply(e,t||[])).next())})}function extractPrimitivesInternal(e,t,i){var n,r;let o=e.parser.json,a=null===(n=o.nodes)||void 0===n?void 0:n[t];if(null==a)return console.warn(`extractPrimitivesInternal: Attempt to use nodes[${t}] of glTF but the node doesn't exist`),null;let s=a.mesh;if(null==s)return null;let l=null===(r=o.meshes)||void 0===r?void 0:r[s];if(null==l)return console.warn(`extractPrimitivesInternal: Attempt to use meshes[${s}] of glTF but the mesh doesn't exist`),null;let u=l.primitives.length,d=[];return i.traverse(e=>{d.length<u&&e.isMesh&&d.push(e)}),d}function gltfExtractPrimitivesFromNode(e,t){return __awaiter$6(this,void 0,void 0,function*(){let i=yield e.parser.getDependency("node",t);return extractPrimitivesInternal(e,t,i)})}function gltfExtractPrimitivesFromNodes(e){return __awaiter$6(this,void 0,void 0,function*(){let t=yield e.parser.getDependencies("node"),i=new Map;return t.forEach((t,n)=>{let r=extractPrimitivesInternal(e,n,t);null!=r&&i.set(n,r)}),i})}function gltfGetAssociatedMaterialIndex(e,t){var i,r;let o=parseInt(n.UZH,10),a=null;if(o>=133)a=null!==(r=null===(i=e.associations.get(t))||void 0===i?void 0:i.materials)&&void 0!==r?r:null;else{let i=e.associations,n=i.get(t);(null==n?void 0:n.type)==="materials"&&(a=n.index)}return a}"function"==typeof SuppressedError&&SuppressedError;let r={Aa:"aa",Ih:"ih",Ou:"ou",Ee:"ee",Oh:"oh",Blink:"blink",Happy:"happy",Angry:"angry",Sad:"sad",Relaxed:"relaxed",LookUp:"lookUp",Surprised:"surprised",LookDown:"lookDown",LookLeft:"lookLeft",LookRight:"lookRight",BlinkLeft:"blinkLeft",BlinkRight:"blinkRight",Neutral:"neutral"};function saturate(e){return Math.max(Math.min(e,1),0)}let VRMExpressionManager=class VRMExpressionManager{get expressions(){return this._expressions.concat()}get expressionMap(){return Object.assign({},this._expressionMap)}get presetExpressionMap(){let e={},t=new Set(Object.values(r));return Object.entries(this._expressionMap).forEach(([i,n])=>{t.has(i)&&(e[i]=n)}),e}get customExpressionMap(){let e={},t=new Set(Object.values(r));return Object.entries(this._expressionMap).forEach(([i,n])=>{t.has(i)||(e[i]=n)}),e}constructor(){this.blinkExpressionNames=["blink","blinkLeft","blinkRight"],this.lookAtExpressionNames=["lookLeft","lookRight","lookUp","lookDown"],this.mouthExpressionNames=["aa","ee","ih","oh","ou"],this._expressions=[],this._expressionMap={}}copy(e){let t=this._expressions.concat();return t.forEach(e=>{this.unregisterExpression(e)}),e._expressions.forEach(e=>{this.registerExpression(e)}),this.blinkExpressionNames=e.blinkExpressionNames.concat(),this.lookAtExpressionNames=e.lookAtExpressionNames.concat(),this.mouthExpressionNames=e.mouthExpressionNames.concat(),this}clone(){return new VRMExpressionManager().copy(this)}getExpression(e){var t;return null!==(t=this._expressionMap[e])&&void 0!==t?t:null}registerExpression(e){this._expressions.push(e),this._expressionMap[e.expressionName]=e}unregisterExpression(e){let t=this._expressions.indexOf(e);-1===t&&console.warn("VRMExpressionManager: The specified expressions is not registered"),this._expressions.splice(t,1),delete this._expressionMap[e.expressionName]}getValue(e){var t;let i=this.getExpression(e);return null!==(t=null==i?void 0:i.weight)&&void 0!==t?t:null}setValue(e,t){let i=this.getExpression(e);i&&(i.weight=saturate(t))}getExpressionTrackName(e){let t=this.getExpression(e);return t?`${t.name}.weight`:null}update(){let e=this._calculateWeightMultipliers();this._expressions.forEach(e=>{e.clearAppliedWeight()}),this._expressions.forEach(t=>{let i=1,n=t.expressionName;-1!==this.blinkExpressionNames.indexOf(n)&&(i*=e.blink),-1!==this.lookAtExpressionNames.indexOf(n)&&(i*=e.lookAt),-1!==this.mouthExpressionNames.indexOf(n)&&(i*=e.mouth),t.applyWeight({multiplier:i})})}_calculateWeightMultipliers(){let e=1,t=1,i=1;return this._expressions.forEach(n=>{e-=n.overrideBlinkAmount,t-=n.overrideLookAtAmount,i-=n.overrideMouthAmount}),{blink:e=Math.max(0,e),lookAt:t=Math.max(0,t),mouth:i=Math.max(0,i)}}};let o={Color:"color",EmissionColor:"emissionColor",ShadeColor:"shadeColor",RimColor:"rimColor",OutlineColor:"outlineColor"},a={_Color:o.Color,_EmissionColor:o.EmissionColor,_ShadeColor:o.ShadeColor,_RimColor:o.RimColor,_OutlineColor:o.OutlineColor},s=new n.Ilk;let VRMExpressionMaterialColorBind=class VRMExpressionMaterialColorBind{constructor({material:e,type:t,targetValue:i,targetAlpha:n}){this.material=e,this.type=t,this.targetValue=i,this.targetAlpha=null!=n?n:1;let r=this._initColorBindState(),o=this._initAlphaBindState();this._state={color:r,alpha:o}}applyWeight(e){let{color:t,alpha:i}=this._state;if(null!=t){let{propertyName:i,deltaValue:n}=t,r=this.material[i];void 0!=r&&r.add(s.copy(n).multiplyScalar(e))}if(null!=i){let{propertyName:t,deltaValue:n}=i,r=this.material[t];void 0!=r&&(this.material[t]+=n*e)}}clearAppliedWeight(){let{color:e,alpha:t}=this._state;if(null!=e){let{propertyName:t,initialValue:i}=e,n=this.material[t];void 0!=n&&n.copy(i)}if(null!=t){let{propertyName:e,initialValue:i}=t,n=this.material[e];void 0!=n&&(this.material[e]=i)}}_initColorBindState(){var e,t,i;let{material:r,type:o,targetValue:a}=this,s=this._getPropertyNameMap(),l=null!==(t=null===(e=null==s?void 0:s[o])||void 0===e?void 0:e[0])&&void 0!==t?t:null;if(null==l)return console.warn(`Tried to add a material color bind to the material ${null!==(i=r.name)&&void 0!==i?i:"(no name)"}, the type ${o} but the material or the type is not supported.`),null;let u=r[l],d=u.clone(),h=new n.Ilk(a.r-d.r,a.g-d.g,a.b-d.b);return{propertyName:l,initialValue:d,deltaValue:h}}_initAlphaBindState(){var e,t,i;let{material:n,type:r,targetAlpha:o}=this,a=this._getPropertyNameMap(),s=null!==(t=null===(e=null==a?void 0:a[r])||void 0===e?void 0:e[1])&&void 0!==t?t:null;if(null==s&&1!==o)return console.warn(`Tried to add a material alpha bind to the material ${null!==(i=n.name)&&void 0!==i?i:"(no name)"}, the type ${r} but the material or the type does not support alpha.`),null;if(null==s)return null;let l=n[s];return{propertyName:s,initialValue:l,deltaValue:o-l}}_getPropertyNameMap(){var e,t;return null!==(t=null===(e=Object.entries(VRMExpressionMaterialColorBind._propertyNameMapMap).find(([e])=>!0===this.material[e]))||void 0===e?void 0:e[1])&&void 0!==t?t:null}};VRMExpressionMaterialColorBind._propertyNameMapMap={isMeshStandardMaterial:{color:["color","opacity"],emissionColor:["emissive",null]},isMeshBasicMaterial:{color:["color","opacity"]},isMToonMaterial:{color:["color","opacity"],emissionColor:["emissive",null],outlineColor:["outlineColorFactor",null],matcapColor:["matcapFactor",null],rimColor:["parametricRimColorFactor",null],shadeColor:["shadeColorFactor",null]}};let VRMExpressionMorphTargetBind=class VRMExpressionMorphTargetBind{constructor({primitives:e,index:t,weight:i}){this.primitives=e,this.index=t,this.weight=i}applyWeight(e){this.primitives.forEach(t=>{var i;(null===(i=t.morphTargetInfluences)||void 0===i?void 0:i[this.index])!=null&&(t.morphTargetInfluences[this.index]+=this.weight*e)})}clearAppliedWeight(){this.primitives.forEach(e=>{var t;(null===(t=e.morphTargetInfluences)||void 0===t?void 0:t[this.index])!=null&&(e.morphTargetInfluences[this.index]=0)})}};let l=new n.FM8;let VRMExpressionTextureTransformBind=class VRMExpressionTextureTransformBind{constructor({material:e,scale:t,offset:i}){var n,r;this.material=e,this.scale=t,this.offset=i;let o=null===(n=Object.entries(VRMExpressionTextureTransformBind._propertyNamesMap).find(([t])=>!0===e[t]))||void 0===n?void 0:n[1];null==o?(console.warn(`Tried to add a texture transform bind to the material ${null!==(r=e.name)&&void 0!==r?r:"(no name)"} but the material is not supported.`),this._properties=[]):(this._properties=[],o.forEach(n=>{var r;let o=null===(r=e[n])||void 0===r?void 0:r.clone();if(!o)return null;e[n]=o;let a=o.offset.clone(),s=o.repeat.clone(),l=i.clone().sub(a),u=t.clone().sub(s);this._properties.push({name:n,initialOffset:a,deltaOffset:l,initialScale:s,deltaScale:u})}))}applyWeight(e){this._properties.forEach(t=>{let i=this.material[t.name];void 0!==i&&(i.offset.add(l.copy(t.deltaOffset).multiplyScalar(e)),i.repeat.add(l.copy(t.deltaScale).multiplyScalar(e)))})}clearAppliedWeight(){this._properties.forEach(e=>{let t=this.material[e.name];void 0!==t&&(t.offset.copy(e.initialOffset),t.repeat.copy(e.initialScale))})}};VRMExpressionTextureTransformBind._propertyNamesMap={isMeshStandardMaterial:["map","emissiveMap","bumpMap","normalMap","displacementMap","roughnessMap","metalnessMap","alphaMap"],isMeshBasicMaterial:["map","specularMap","alphaMap"],isMToonMaterial:["map","normalMap","emissiveMap","shadeMultiplyTexture","rimMultiplyTexture","outlineWidthMultiplyTexture","uvAnimationMaskTexture"]};let u=new Set(["1.0","1.0-beta"]);let VRMExpressionLoaderPlugin=class VRMExpressionLoaderPlugin{get name(){return"VRMExpressionLoaderPlugin"}constructor(e){this.parser=e}afterRoot(e){return __awaiter$6(this,void 0,void 0,function*(){e.userData.vrmExpressionManager=yield this._import(e)})}_import(e){return __awaiter$6(this,void 0,void 0,function*(){let t=yield this._v1Import(e);if(t)return t;let i=yield this._v0Import(e);return i||null})}_v1Import(e){var t,i;return __awaiter$6(this,void 0,void 0,function*(){let o=this.parser.json,a=(null===(t=o.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))!==-1;if(!a)return null;let s=null===(i=o.extensions)||void 0===i?void 0:i.VRMC_vrm;if(!s)return null;let l=s.specVersion;if(!u.has(l))return console.warn(`VRMExpressionLoaderPlugin: Unknown VRMC_vrm specVersion "${l}"`),null;let d=s.expressions;if(!d)return null;let h=new Set(Object.values(r)),p=new Map;null!=d.preset&&Object.entries(d.preset).forEach(([e,t])=>{if(null!=t){if(!h.has(e)){console.warn(`VRMExpressionLoaderPlugin: Unknown preset name "${e}" detected. Ignoring the expression`);return}p.set(e,t)}}),null!=d.custom&&Object.entries(d.custom).forEach(([e,t])=>{if(h.has(e)){console.warn(`VRMExpressionLoaderPlugin: Custom expression cannot have preset name "${e}". Ignoring the expression`);return}p.set(e,t)});let c=new VRMExpressionManager;return yield Promise.all(Array.from(p.entries()).map(([t,i])=>__awaiter$6(this,void 0,void 0,function*(){var r,o,a,s,l,u,d;let h=new VRMExpression(t);if(e.scene.add(h),h.isBinary=null!==(r=i.isBinary)&&void 0!==r&&r,h.overrideBlink=null!==(o=i.overrideBlink)&&void 0!==o?o:"none",h.overrideLookAt=null!==(a=i.overrideLookAt)&&void 0!==a?a:"none",h.overrideMouth=null!==(s=i.overrideMouth)&&void 0!==s?s:"none",null===(l=i.morphTargetBinds)||void 0===l||l.forEach(t=>__awaiter$6(this,void 0,void 0,function*(){var n;if(void 0===t.node||void 0===t.index)return;let r=yield gltfExtractPrimitivesFromNode(e,t.node),o=t.index;if(!r.every(e=>Array.isArray(e.morphTargetInfluences)&&o<e.morphTargetInfluences.length)){console.warn(`VRMExpressionLoaderPlugin: ${i.name} attempts to index morph #${o} but not found.`);return}h.addBind(new VRMExpressionMorphTargetBind({primitives:r,index:o,weight:null!==(n=t.weight)&&void 0!==n?n:1}))})),i.materialColorBinds||i.textureTransformBinds){let t=[];e.scene.traverse(e=>{let i=e.material;i&&t.push(i)}),null===(u=i.materialColorBinds)||void 0===u||u.forEach(e=>__awaiter$6(this,void 0,void 0,function*(){let i=t.filter(t=>{let i=gltfGetAssociatedMaterialIndex(this.parser,t);return e.material===i});i.forEach(t=>{h.addBind(new VRMExpressionMaterialColorBind({material:t,type:e.type,targetValue:new n.Ilk().fromArray(e.targetValue),targetAlpha:e.targetValue[3]}))})})),null===(d=i.textureTransformBinds)||void 0===d||d.forEach(e=>__awaiter$6(this,void 0,void 0,function*(){let i=t.filter(t=>{let i=gltfGetAssociatedMaterialIndex(this.parser,t);return e.material===i});i.forEach(t=>{var i,r;h.addBind(new VRMExpressionTextureTransformBind({material:t,offset:new n.FM8().fromArray(null!==(i=e.offset)&&void 0!==i?i:[0,0]),scale:new n.FM8().fromArray(null!==(r=e.scale)&&void 0!==r?r:[1,1])}))})}))}c.registerExpression(h)}))),c})}_v0Import(e){var t;return __awaiter$6(this,void 0,void 0,function*(){let i=this.parser.json,r=null===(t=i.extensions)||void 0===t?void 0:t.VRM;if(!r)return null;let o=r.blendShapeMaster;if(!o)return null;let s=new VRMExpressionManager,l=o.blendShapeGroups;if(!l)return s;let u=new Set;return yield Promise.all(l.map(t=>__awaiter$6(this,void 0,void 0,function*(){var r;let o=t.presetName,l=null!=o&&VRMExpressionLoaderPlugin.v0v1PresetNameMap[o]||null,d=null!=l?l:t.name;if(null==d){console.warn("VRMExpressionLoaderPlugin: One of custom expressions has no name. Ignoring the expression");return}if(u.has(d)){console.warn(`VRMExpressionLoaderPlugin: An expression preset ${o} has duplicated entries. Ignoring the expression`);return}u.add(d);let h=new VRMExpression(d);e.scene.add(h),h.isBinary=null!==(r=t.isBinary)&&void 0!==r&&r,t.binds&&t.binds.forEach(n=>__awaiter$6(this,void 0,void 0,function*(){var r;if(void 0===n.mesh||void 0===n.index)return;let o=[];null===(r=i.nodes)||void 0===r||r.forEach((e,t)=>{e.mesh===n.mesh&&o.push(t)});let a=n.index;yield Promise.all(o.map(i=>__awaiter$6(this,void 0,void 0,function*(){var r;let o=yield gltfExtractPrimitivesFromNode(e,i);if(!o.every(e=>Array.isArray(e.morphTargetInfluences)&&a<e.morphTargetInfluences.length)){console.warn(`VRMExpressionLoaderPlugin: ${t.name} attempts to index ${a}th morph but not found.`);return}h.addBind(new VRMExpressionMorphTargetBind({primitives:o,index:a,weight:.01*(null!==(r=n.weight)&&void 0!==r?r:100)}))})))}));let p=t.materialValues;p&&0!==p.length&&p.forEach(t=>{if(void 0===t.materialName||void 0===t.propertyName||void 0===t.targetValue)return;let i=[];e.scene.traverse(e=>{if(e.material){let n=e.material;Array.isArray(n)?i.push(...n.filter(e=>(e.name===t.materialName||e.name===t.materialName+" (Outline)")&&-1===i.indexOf(e))):n.name===t.materialName&&-1===i.indexOf(n)&&i.push(n)}});let r=t.propertyName;i.forEach(e=>{if("_MainTex_ST"===r){let i=new n.FM8(t.targetValue[0],t.targetValue[1]),r=new n.FM8(t.targetValue[2],t.targetValue[3]);r.y=1-r.y-i.y,h.addBind(new VRMExpressionTextureTransformBind({material:e,scale:i,offset:r}));return}let i=a[r];if(i){h.addBind(new VRMExpressionMaterialColorBind({material:e,type:i,targetValue:new n.Ilk().fromArray(t.targetValue),targetAlpha:t.targetValue[3]}));return}console.warn(r+" is not supported")})}),s.registerExpression(h)}))),s})}};VRMExpressionLoaderPlugin.v0v1PresetNameMap={a:"aa",e:"ee",i:"ih",o:"oh",u:"ou",blink:"blink",joy:"happy",angry:"angry",sorrow:"sad",fun:"relaxed",lookup:"lookUp",lookdown:"lookDown",lookleft:"lookLeft",lookright:"lookRight",blink_l:"blinkLeft",blink_r:"blinkRight",neutral:"neutral"};let VRMFirstPerson=class VRMFirstPerson{constructor(e,t){this._firstPersonOnlyLayer=VRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER,this._thirdPersonOnlyLayer=VRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER,this._initializedLayers=!1,this.humanoid=e,this.meshAnnotations=t}copy(e){if(this.humanoid!==e.humanoid)throw Error("VRMFirstPerson: humanoid must be same in order to copy");return this.meshAnnotations=e.meshAnnotations.map(e=>({meshes:e.meshes.concat(),type:e.type})),this}clone(){return new VRMFirstPerson(this.humanoid,this.meshAnnotations).copy(this)}get firstPersonOnlyLayer(){return this._firstPersonOnlyLayer}get thirdPersonOnlyLayer(){return this._thirdPersonOnlyLayer}setup({firstPersonOnlyLayer:e=VRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER,thirdPersonOnlyLayer:t=VRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER}={}){this._initializedLayers||(this._firstPersonOnlyLayer=e,this._thirdPersonOnlyLayer=t,this.meshAnnotations.forEach(e=>{e.meshes.forEach(t=>{"firstPersonOnly"===e.type?(t.layers.set(this._firstPersonOnlyLayer),t.traverse(e=>e.layers.set(this._firstPersonOnlyLayer))):"thirdPersonOnly"===e.type?(t.layers.set(this._thirdPersonOnlyLayer),t.traverse(e=>e.layers.set(this._thirdPersonOnlyLayer))):"auto"===e.type&&this._createHeadlessModel(t)})}),this._initializedLayers=!0)}_excludeTriangles(e,t,i,n){let r=0;if(null!=t&&t.length>0)for(let o=0;o<e.length;o+=3){let a=e[o],s=e[o+1],l=e[o+2],u=t[a],d=i[a];if(u[0]>0&&n.includes(d[0])||u[1]>0&&n.includes(d[1])||u[2]>0&&n.includes(d[2])||u[3]>0&&n.includes(d[3]))continue;let h=t[s],p=i[s];if(h[0]>0&&n.includes(p[0])||h[1]>0&&n.includes(p[1])||h[2]>0&&n.includes(p[2])||h[3]>0&&n.includes(p[3]))continue;let c=t[l],m=i[l];!(c[0]>0&&n.includes(m[0])||c[1]>0&&n.includes(m[1])||c[2]>0&&n.includes(m[2]))&&(c[3]>0&&n.includes(m[3])||(e[r++]=a,e[r++]=s,e[r++]=l))}return r}_createErasedMesh(e,t){let i=new n.TUv(e.geometry.clone(),e.material);i.name=`${e.name}(erase)`,i.frustumCulled=e.frustumCulled,i.layers.set(this._firstPersonOnlyLayer);let r=i.geometry,o=r.getAttribute("skinIndex"),a=o instanceof n.ylh?[]:o.array,s=[];for(let e=0;e<a.length;e+=4)s.push([a[e],a[e+1],a[e+2],a[e+3]]);let l=r.getAttribute("skinWeight"),u=l instanceof n.ylh?[]:l.array,d=[];for(let e=0;e<u.length;e+=4)d.push([u[e],u[e+1],u[e+2],u[e+3]]);let h=r.getIndex();if(!h)throw Error("The geometry doesn't have an index buffer");let p=Array.from(h.array),c=this._excludeTriangles(p,d,s,t),m=[];for(let e=0;e<c;e++)m[e]=p[e];return r.setIndex(m),e.onBeforeRender&&(i.onBeforeRender=e.onBeforeRender),i.bind(new n.OdW(e.skeleton.bones,e.skeleton.boneInverses),new n.yGw),i}_createHeadlessModelForSkinnedMesh(e,t){let i=[];if(t.skeleton.bones.forEach((e,t)=>{this._isEraseTarget(e)&&i.push(t)}),!i.length){t.layers.enable(this._thirdPersonOnlyLayer),t.layers.enable(this._firstPersonOnlyLayer);return}t.layers.set(this._thirdPersonOnlyLayer);let n=this._createErasedMesh(t,i);e.add(n)}_createHeadlessModel(e){if("Group"===e.type){if(e.layers.set(this._thirdPersonOnlyLayer),this._isEraseTarget(e))e.traverse(e=>e.layers.set(this._thirdPersonOnlyLayer));else{let t=new n.ZAu;t.name=`_headless_${e.name}`,t.layers.set(this._firstPersonOnlyLayer),e.parent.add(t),e.children.filter(e=>"SkinnedMesh"===e.type).forEach(e=>{this._createHeadlessModelForSkinnedMesh(t,e)})}}else"SkinnedMesh"===e.type?this._createHeadlessModelForSkinnedMesh(e.parent,e):this._isEraseTarget(e)&&(e.layers.set(this._thirdPersonOnlyLayer),e.traverse(e=>e.layers.set(this._thirdPersonOnlyLayer)))}_isEraseTarget(e){return e===this.humanoid.getRawBoneNode("head")||!!e.parent&&this._isEraseTarget(e.parent)}};VRMFirstPerson.DEFAULT_FIRSTPERSON_ONLY_LAYER=9,VRMFirstPerson.DEFAULT_THIRDPERSON_ONLY_LAYER=10;let d=new Set(["1.0","1.0-beta"]);let VRMFirstPersonLoaderPlugin=class VRMFirstPersonLoaderPlugin{get name(){return"VRMFirstPersonLoaderPlugin"}constructor(e){this.parser=e}afterRoot(e){return __awaiter$6(this,void 0,void 0,function*(){let t=e.userData.vrmHumanoid;if(null!==t){if(void 0===t)throw Error("VRMFirstPersonLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first");e.userData.vrmFirstPerson=yield this._import(e,t)}})}_import(e,t){return __awaiter$6(this,void 0,void 0,function*(){if(null==t)return null;let i=yield this._v1Import(e,t);if(i)return i;let n=yield this._v0Import(e,t);return n||null})}_v1Import(e,t){var i,n;return __awaiter$6(this,void 0,void 0,function*(){let r=this.parser.json,o=(null===(i=r.extensionsUsed)||void 0===i?void 0:i.indexOf("VRMC_vrm"))!==-1;if(!o)return null;let a=null===(n=r.extensions)||void 0===n?void 0:n.VRMC_vrm;if(!a)return null;let s=a.specVersion;if(!d.has(s))return console.warn(`VRMFirstPersonLoaderPlugin: Unknown VRMC_vrm specVersion "${s}"`),null;let l=a.firstPerson;if(!l)return null;let u=[],h=yield gltfExtractPrimitivesFromNodes(e);return Array.from(h.entries()).forEach(([e,t])=>{var i;let n=l.meshAnnotations?l.meshAnnotations.find(t=>t.node===e):void 0;u.push({meshes:t,type:null!==(i=null==n?void 0:n.type)&&void 0!==i?i:"both"})}),new VRMFirstPerson(t,u)})}_v0Import(e,t){var i;return __awaiter$6(this,void 0,void 0,function*(){let n=this.parser.json,r=null===(i=n.extensions)||void 0===i?void 0:i.VRM;if(!r)return null;let o=r.firstPerson;if(!o)return null;let a=[],s=yield gltfExtractPrimitivesFromNodes(e);return Array.from(s.entries()).forEach(([e,t])=>{let i=n.nodes[e],r=o.meshAnnotations?o.meshAnnotations.find(e=>e.mesh===i.mesh):void 0;a.push({meshes:t,type:this._convertV0FlagToV1Type(null==r?void 0:r.firstPersonFlag)})}),new VRMFirstPerson(t,a)})}_convertV0FlagToV1Type(e){return"FirstPersonOnly"===e?"firstPersonOnly":"ThirdPersonOnly"===e?"thirdPersonOnly":"Auto"===e?"auto":"both"}};let h=new n.Pa4,p=new n.Pa4,c=new n._fP;let VRMHumanoidHelper=class VRMHumanoidHelper extends n.ZAu{constructor(e){super(),this.vrmHumanoid=e,this._boneAxesMap=new Map,Object.values(e.humanBones).forEach(e=>{let t=new n.y8_(1);t.matrixAutoUpdate=!1,t.material.depthTest=!1,t.material.depthWrite=!1,this.add(t),this._boneAxesMap.set(e,t)})}dispose(){Array.from(this._boneAxesMap.values()).forEach(e=>{e.geometry.dispose(),e.material.dispose()})}updateMatrixWorld(e){Array.from(this._boneAxesMap.entries()).forEach(([e,t])=>{e.node.updateWorldMatrix(!0,!1),e.node.matrixWorld.decompose(h,c,p);let i=h.set(.1,.1,.1).divide(p);t.matrix.copy(e.node.matrixWorld).scale(i)}),super.updateMatrixWorld(e)}};let m=["hips","spine","chest","upperChest","neck","head","leftEye","rightEye","jaw","leftUpperLeg","leftLowerLeg","leftFoot","leftToes","rightUpperLeg","rightLowerLeg","rightFoot","rightToes","leftShoulder","leftUpperArm","leftLowerArm","leftHand","rightShoulder","rightUpperArm","rightLowerArm","rightHand","leftThumbMetacarpal","leftThumbProximal","leftThumbDistal","leftIndexProximal","leftIndexIntermediate","leftIndexDistal","leftMiddleProximal","leftMiddleIntermediate","leftMiddleDistal","leftRingProximal","leftRingIntermediate","leftRingDistal","leftLittleProximal","leftLittleIntermediate","leftLittleDistal","rightThumbMetacarpal","rightThumbProximal","rightThumbDistal","rightIndexProximal","rightIndexIntermediate","rightIndexDistal","rightMiddleProximal","rightMiddleIntermediate","rightMiddleDistal","rightRingProximal","rightRingIntermediate","rightRingDistal","rightLittleProximal","rightLittleIntermediate","rightLittleDistal"],f={hips:null,spine:"hips",chest:"spine",upperChest:"chest",neck:"upperChest",head:"neck",leftEye:"head",rightEye:"head",jaw:"head",leftUpperLeg:"hips",leftLowerLeg:"leftUpperLeg",leftFoot:"leftLowerLeg",leftToes:"leftFoot",rightUpperLeg:"hips",rightLowerLeg:"rightUpperLeg",rightFoot:"rightLowerLeg",rightToes:"rightFoot",leftShoulder:"upperChest",leftUpperArm:"leftShoulder",leftLowerArm:"leftUpperArm",leftHand:"leftLowerArm",rightShoulder:"upperChest",rightUpperArm:"rightShoulder",rightLowerArm:"rightUpperArm",rightHand:"rightLowerArm",leftThumbMetacarpal:"leftHand",leftThumbProximal:"leftThumbMetacarpal",leftThumbDistal:"leftThumbProximal",leftIndexProximal:"leftHand",leftIndexIntermediate:"leftIndexProximal",leftIndexDistal:"leftIndexIntermediate",leftMiddleProximal:"leftHand",leftMiddleIntermediate:"leftMiddleProximal",leftMiddleDistal:"leftMiddleIntermediate",leftRingProximal:"leftHand",leftRingIntermediate:"leftRingProximal",leftRingDistal:"leftRingIntermediate",leftLittleProximal:"leftHand",leftLittleIntermediate:"leftLittleProximal",leftLittleDistal:"leftLittleIntermediate",rightThumbMetacarpal:"rightHand",rightThumbProximal:"rightThumbMetacarpal",rightThumbDistal:"rightThumbProximal",rightIndexProximal:"rightHand",rightIndexIntermediate:"rightIndexProximal",rightIndexDistal:"rightIndexIntermediate",rightMiddleProximal:"rightHand",rightMiddleIntermediate:"rightMiddleProximal",rightMiddleDistal:"rightMiddleIntermediate",rightRingProximal:"rightHand",rightRingIntermediate:"rightRingProximal",rightRingDistal:"rightRingIntermediate",rightLittleProximal:"rightHand",rightLittleIntermediate:"rightLittleProximal",rightLittleDistal:"rightLittleIntermediate"};function quatInvertCompat$1(e){return e.invert?e.invert():e.inverse(),e}let g=new n.Pa4,v=new n._fP;let VRMRig=class VRMRig{constructor(e){this.humanBones=e,this.restPose=this.getAbsolutePose()}getAbsolutePose(){let e={};return Object.keys(this.humanBones).forEach(t=>{let i=this.getBoneNode(t);i&&(g.copy(i.position),v.copy(i.quaternion),e[t]={position:g.toArray(),rotation:v.toArray()})}),e}getPose(){let e={};return Object.keys(this.humanBones).forEach(t=>{let i=this.getBoneNode(t);if(!i)return;g.set(0,0,0),v.identity();let n=this.restPose[t];(null==n?void 0:n.position)&&g.fromArray(n.position).negate(),(null==n?void 0:n.rotation)&&quatInvertCompat$1(v.fromArray(n.rotation)),g.add(i.position),v.premultiply(i.quaternion),e[t]={position:g.toArray(),rotation:v.toArray()}}),e}setPose(e){Object.entries(e).forEach(([e,t])=>{let i=this.getBoneNode(e);if(!i)return;let n=this.restPose[e];n&&((null==t?void 0:t.position)&&(i.position.fromArray(t.position),n.position&&i.position.add(g.fromArray(n.position))),(null==t?void 0:t.rotation)&&(i.quaternion.fromArray(t.rotation),n.rotation&&i.quaternion.multiply(v.fromArray(n.rotation))))})}resetPose(){Object.entries(this.restPose).forEach(([e,t])=>{let i=this.getBoneNode(e);i&&((null==t?void 0:t.position)&&i.position.fromArray(t.position),(null==t?void 0:t.rotation)&&i.quaternion.fromArray(t.rotation))})}getBone(e){var t;return null!==(t=this.humanBones[e])&&void 0!==t?t:void 0}getBoneNode(e){var t,i;return null!==(i=null===(t=this.humanBones[e])||void 0===t?void 0:t.node)&&void 0!==i?i:null}};let _=new n.Pa4,M=new n._fP,x=new n.Pa4;let VRMHumanoidRig=class VRMHumanoidRig extends VRMRig{static _setupTransforms(e){let t=new n.Tme;t.name="VRMHumanoidRig";let i={},r={},o={};m.forEach(t=>{var a;let s=e.getBoneNode(t);if(s){let e=new n.Pa4,l=new n._fP;s.updateWorldMatrix(!0,!1),s.matrixWorld.decompose(e,l,_),i[t]=e,r[t]=s.quaternion.clone();let u=new n._fP;null===(a=s.parent)||void 0===a||a.matrixWorld.decompose(_,u,_),o[t]=u}});let a={};return m.forEach(r=>{var o;let s=e.getBoneNode(r);if(s){let e;let l=i[r],u=r;for(;null==e&&null!=(u=f[u]);)e=i[u];let d=new n.Tme;d.name="Normalized_"+s.name;let h=u?null===(o=a[u])||void 0===o?void 0:o.node:t;h.add(d),d.position.copy(l),e&&d.position.sub(e),a[r]={node:d}}}),{rigBones:a,root:t,parentWorldRotations:o,boneRotations:r}}constructor(e){let{rigBones:t,root:i,parentWorldRotations:n,boneRotations:r}=VRMHumanoidRig._setupTransforms(e);super(t),this.original=e,this.root=i,this._parentWorldRotations=n,this._boneRotations=r}update(){m.forEach(e=>{let t=this.original.getBoneNode(e);if(null!=t){let i=this.getBoneNode(e),n=this._parentWorldRotations[e],r=M.copy(n).invert(),o=this._boneRotations[e];if(t.quaternion.copy(i.quaternion).multiply(n).premultiply(r).multiply(o),"hips"===e){let e=i.getWorldPosition(x);t.parent.updateWorldMatrix(!0,!1);let n=t.parent.matrixWorld,r=e.applyMatrix4(n.invert());t.position.copy(r)}}})}};let VRMHumanoid=class VRMHumanoid{get restPose(){return console.warn("VRMHumanoid: restPose is deprecated. Use either rawRestPose or normalizedRestPose instead."),this.rawRestPose}get rawRestPose(){return this._rawHumanBones.restPose}get normalizedRestPose(){return this._normalizedHumanBones.restPose}get humanBones(){return this._rawHumanBones.humanBones}get rawHumanBones(){return this._rawHumanBones.humanBones}get normalizedHumanBones(){return this._normalizedHumanBones.humanBones}get normalizedHumanBonesRoot(){return this._normalizedHumanBones.root}constructor(e,t){var i;this.autoUpdateHumanBones=null===(i=null==t?void 0:t.autoUpdateHumanBones)||void 0===i||i,this._rawHumanBones=new VRMRig(e),this._normalizedHumanBones=new VRMHumanoidRig(this._rawHumanBones)}copy(e){return this.autoUpdateHumanBones=e.autoUpdateHumanBones,this._rawHumanBones=new VRMRig(e.humanBones),this._normalizedHumanBones=new VRMHumanoidRig(this._rawHumanBones),this}clone(){return new VRMHumanoid(this.humanBones,{autoUpdateHumanBones:this.autoUpdateHumanBones}).copy(this)}getAbsolutePose(){return console.warn("VRMHumanoid: getAbsolutePose() is deprecated. Use either getRawAbsolutePose() or getNormalizedAbsolutePose() instead."),this.getRawAbsolutePose()}getRawAbsolutePose(){return this._rawHumanBones.getAbsolutePose()}getNormalizedAbsolutePose(){return this._normalizedHumanBones.getAbsolutePose()}getPose(){return console.warn("VRMHumanoid: getPose() is deprecated. Use either getRawPose() or getNormalizedPose() instead."),this.getRawPose()}getRawPose(){return this._rawHumanBones.getPose()}getNormalizedPose(){return this._normalizedHumanBones.getPose()}setPose(e){return console.warn("VRMHumanoid: setPose() is deprecated. Use either setRawPose() or setNormalizedPose() instead."),this.setRawPose(e)}setRawPose(e){return this._rawHumanBones.setPose(e)}setNormalizedPose(e){return this._normalizedHumanBones.setPose(e)}resetPose(){return console.warn("VRMHumanoid: resetPose() is deprecated. Use either resetRawPose() or resetNormalizedPose() instead."),this.resetRawPose()}resetRawPose(){return this._rawHumanBones.resetPose()}resetNormalizedPose(){return this._normalizedHumanBones.resetPose()}getBone(e){return console.warn("VRMHumanoid: getBone() is deprecated. Use either getRawBone() or getNormalizedBone() instead."),this.getRawBone(e)}getRawBone(e){return this._rawHumanBones.getBone(e)}getNormalizedBone(e){return this._normalizedHumanBones.getBone(e)}getBoneNode(e){return console.warn("VRMHumanoid: getBoneNode() is deprecated. Use either getRawBoneNode() or getNormalizedBoneNode() instead."),this.getRawBoneNode(e)}getRawBoneNode(e){return this._rawHumanBones.getBoneNode(e)}getNormalizedBoneNode(e){return this._normalizedHumanBones.getBoneNode(e)}update(){this.autoUpdateHumanBones&&this._normalizedHumanBones.update()}};let R={Hips:"hips",Spine:"spine",Head:"head",LeftUpperLeg:"leftUpperLeg",LeftLowerLeg:"leftLowerLeg",LeftFoot:"leftFoot",RightUpperLeg:"rightUpperLeg",RightLowerLeg:"rightLowerLeg",RightFoot:"rightFoot",LeftUpperArm:"leftUpperArm",LeftLowerArm:"leftLowerArm",LeftHand:"leftHand",RightUpperArm:"rightUpperArm",RightLowerArm:"rightLowerArm",RightHand:"rightHand"},y=new Set(["1.0","1.0-beta"]),T={leftThumbProximal:"leftThumbMetacarpal",leftThumbIntermediate:"leftThumbProximal",rightThumbProximal:"rightThumbMetacarpal",rightThumbIntermediate:"rightThumbProximal"};let VRMHumanoidLoaderPlugin=class VRMHumanoidLoaderPlugin{get name(){return"VRMHumanoidLoaderPlugin"}constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot,this.autoUpdateHumanBones=null==t?void 0:t.autoUpdateHumanBones}afterRoot(e){return __awaiter$6(this,void 0,void 0,function*(){e.userData.vrmHumanoid=yield this._import(e)})}_import(e){return __awaiter$6(this,void 0,void 0,function*(){let t=yield this._v1Import(e);if(t)return t;let i=yield this._v0Import(e);return i||null})}_v1Import(e){var t,i;return __awaiter$6(this,void 0,void 0,function*(){let n=this.parser.json,r=(null===(t=n.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))!==-1;if(!r)return null;let o=null===(i=n.extensions)||void 0===i?void 0:i.VRMC_vrm;if(!o)return null;let a=o.specVersion;if(!y.has(a))return console.warn(`VRMHumanoidLoaderPlugin: Unknown VRMC_vrm specVersion "${a}"`),null;let s=o.humanoid;if(!s)return null;let l=null!=s.humanBones.leftThumbIntermediate||null!=s.humanBones.rightThumbIntermediate,u={};null!=s.humanBones&&(yield Promise.all(Object.entries(s.humanBones).map(([e,t])=>__awaiter$6(this,void 0,void 0,function*(){let i=e,n=t.node;if(l){let e=T[i];null!=e&&(i=e)}let r=yield this.parser.getDependency("node",n);if(null==r){console.warn(`A glTF node bound to the humanoid bone ${i} (index = ${n}) does not exist`);return}u[i]={node:r}}))));let d=new VRMHumanoid(this._ensureRequiredBonesExist(u),{autoUpdateHumanBones:this.autoUpdateHumanBones});if(e.scene.add(d.normalizedHumanBonesRoot),this.helperRoot){let e=new VRMHumanoidHelper(d);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return d})}_v0Import(e){var t;return __awaiter$6(this,void 0,void 0,function*(){let i=this.parser.json,n=null===(t=i.extensions)||void 0===t?void 0:t.VRM;if(!n)return null;let r=n.humanoid;if(!r)return null;let o={};null!=r.humanBones&&(yield Promise.all(r.humanBones.map(e=>__awaiter$6(this,void 0,void 0,function*(){let t=e.bone,i=e.node;if(null==t||null==i)return;let n=yield this.parser.getDependency("node",i);if(null==n){console.warn(`A glTF node bound to the humanoid bone ${t} (index = ${i}) does not exist`);return}let r=T[t],a=null!=r?r:t;if(null!=o[a]){console.warn(`Multiple bone entries for ${a} detected (index = ${i}), ignoring duplicated entries.`);return}o[a]={node:n}}))));let a=new VRMHumanoid(this._ensureRequiredBonesExist(o),{autoUpdateHumanBones:this.autoUpdateHumanBones});if(e.scene.add(a.normalizedHumanBonesRoot),this.helperRoot){let e=new VRMHumanoidHelper(a);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return a})}_ensureRequiredBonesExist(e){let t=Object.values(R).filter(t=>null==e[t]);if(t.length>0)throw Error(`VRMHumanoidLoaderPlugin: These humanoid bones are required but not exist: ${t.join(", ")}`);return e}};let FanBufferGeometry=class FanBufferGeometry extends n.u9r{constructor(){super(),this._currentTheta=0,this._currentRadius=0,this.theta=0,this.radius=0,this._currentTheta=0,this._currentRadius=0,this._attrPos=new n.TlE(new Float32Array(195),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.TlE(new Uint16Array(189),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentTheta!==this.theta&&(this._currentTheta=this.theta,e=!0),this._currentRadius!==this.radius&&(this._currentRadius=this.radius,e=!0),e&&this._buildPosition()}_buildPosition(){this._attrPos.setXYZ(0,0,0,0);for(let e=0;e<64;e++){let t=e/63*this._currentTheta;this._attrPos.setXYZ(e+1,this._currentRadius*Math.sin(t),0,this._currentRadius*Math.cos(t))}this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<63;e++)this._attrIndex.setXYZ(3*e,0,e+1,e+2);this._attrIndex.needsUpdate=!0}};let LineAndSphereBufferGeometry=class LineAndSphereBufferGeometry extends n.u9r{constructor(){super(),this.radius=0,this._currentRadius=0,this.tail=new n.Pa4,this._currentTail=new n.Pa4,this._attrPos=new n.TlE(new Float32Array(294),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.TlE(new Uint16Array(194),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1;this._currentRadius!==this.radius&&(this._currentRadius=this.radius,e=!0),this._currentTail.equals(this.tail)||(this._currentTail.copy(this.tail),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){let t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.setXYZ(96,0,0,0),this._attrPos.setXYZ(97,this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){let t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.setXY(192,96,97),this._attrIndex.needsUpdate=!0}};let E=new n._fP,P=new n._fP,w=new n.Pa4,S=new n.Pa4,A=Math.sqrt(2)/2,L=new n._fP(0,0,-A,A),V=new n.Pa4(0,1,0);let VRMLookAtHelper=class VRMLookAtHelper extends n.ZAu{constructor(e){super(),this.matrixAutoUpdate=!1,this.vrmLookAt=e;{let e=new FanBufferGeometry;e.radius=.5;let t=new n.vBJ({color:65280,transparent:!0,opacity:.5,side:n.ehD,depthTest:!1,depthWrite:!1});this._meshPitch=new n.Kj0(e,t),this.add(this._meshPitch)}{let e=new FanBufferGeometry;e.radius=.5;let t=new n.vBJ({color:16711680,transparent:!0,opacity:.5,side:n.ehD,depthTest:!1,depthWrite:!1});this._meshYaw=new n.Kj0(e,t),this.add(this._meshYaw)}{let e=new LineAndSphereBufferGeometry;e.radius=.1;let t=new n.nls({color:16777215,depthTest:!1,depthWrite:!1});this._lineTarget=new n.ejS(e,t),this._lineTarget.frustumCulled=!1,this.add(this._lineTarget)}}dispose(){this._meshYaw.geometry.dispose(),this._meshYaw.material.dispose(),this._meshPitch.geometry.dispose(),this._meshPitch.material.dispose(),this._lineTarget.geometry.dispose(),this._lineTarget.material.dispose()}updateMatrixWorld(e){let t=n.M8C.DEG2RAD*this.vrmLookAt.yaw;this._meshYaw.geometry.theta=t,this._meshYaw.geometry.update();let i=n.M8C.DEG2RAD*this.vrmLookAt.pitch;this._meshPitch.geometry.theta=i,this._meshPitch.geometry.update(),this.vrmLookAt.getLookAtWorldPosition(w),this.vrmLookAt.getLookAtWorldQuaternion(E),E.multiply(this.vrmLookAt.getFaceFrontQuaternion(P)),this._meshYaw.position.copy(w),this._meshYaw.quaternion.copy(E),this._meshPitch.position.copy(w),this._meshPitch.quaternion.copy(E),this._meshPitch.quaternion.multiply(P.setFromAxisAngle(V,t)),this._meshPitch.quaternion.multiply(L);let{target:r,autoUpdate:o}=this.vrmLookAt;null!=r&&o&&(r.getWorldPosition(S).sub(w),this._lineTarget.geometry.tail.copy(S),this._lineTarget.geometry.update(),this._lineTarget.position.copy(w)),super.updateMatrixWorld(e)}};let C=new n.Pa4,I=new n.Pa4;function getWorldQuaternionLite(e,t){return e.matrixWorld.decompose(C,t,I),t}function calcAzimuthAltitude(e){return[Math.atan2(-e.z,e.x),Math.atan2(e.y,Math.sqrt(e.x*e.x+e.z*e.z))]}function sanitizeAngle(e){return e-2*Math.PI*Math.round(e/2/Math.PI)}let U=new n.Pa4(0,0,1),N=new n.Pa4,O=new n.Pa4,b=new n.Pa4,F=new n._fP,D=new n._fP,H=new n._fP,B=new n._fP,k=new n.USm;let VRMLookAt=class VRMLookAt{get yaw(){return this._yaw}set yaw(e){this._yaw=e,this._needsUpdate=!0}get pitch(){return this._pitch}set pitch(e){this._pitch=e,this._needsUpdate=!0}get euler(){return console.warn("VRMLookAt: euler is deprecated. use getEuler() instead."),this.getEuler(new n.USm)}constructor(e,t){this.offsetFromHeadBone=new n.Pa4,this.autoUpdate=!0,this.faceFront=new n.Pa4(0,0,1),this.humanoid=e,this.applier=t,this._yaw=0,this._pitch=0,this._needsUpdate=!0,this._restHeadWorldQuaternion=this.getLookAtWorldQuaternion(new n._fP)}getEuler(e){return e.set(n.M8C.DEG2RAD*this._pitch,n.M8C.DEG2RAD*this._yaw,0,"YXZ")}copy(e){if(this.humanoid!==e.humanoid)throw Error("VRMLookAt: humanoid must be same in order to copy");return this.offsetFromHeadBone.copy(e.offsetFromHeadBone),this.applier=e.applier,this.autoUpdate=e.autoUpdate,this.target=e.target,this.faceFront.copy(e.faceFront),this}clone(){return new VRMLookAt(this.humanoid,this.applier).copy(this)}reset(){this._yaw=0,this._pitch=0,this._needsUpdate=!0}getLookAtWorldPosition(e){let t=this.humanoid.getRawBoneNode("head");return e.copy(this.offsetFromHeadBone).applyMatrix4(t.matrixWorld)}getLookAtWorldQuaternion(e){let t=this.humanoid.getRawBoneNode("head");return getWorldQuaternionLite(t,e)}getFaceFrontQuaternion(e){if(.01>this.faceFront.distanceToSquared(U))return e.copy(this._restHeadWorldQuaternion).invert();let[t,i]=calcAzimuthAltitude(this.faceFront);return k.set(0,.5*Math.PI+t,i,"YZX"),e.setFromEuler(k).premultiply(B.copy(this._restHeadWorldQuaternion).invert())}getLookAtWorldDirection(e){return this.getLookAtWorldQuaternion(D),this.getFaceFrontQuaternion(H),e.copy(U).applyQuaternion(D).applyQuaternion(H).applyEuler(this.getEuler(k))}lookAt(e){let t=F.copy(this._restHeadWorldQuaternion).multiply(quatInvertCompat$1(this.getLookAtWorldQuaternion(D))),i=this.getLookAtWorldPosition(O),r=b.copy(e).sub(i).applyQuaternion(t).normalize(),[o,a]=calcAzimuthAltitude(this.faceFront),[s,l]=calcAzimuthAltitude(r),u=sanitizeAngle(s-o),d=sanitizeAngle(a-l);this._yaw=n.M8C.RAD2DEG*u,this._pitch=n.M8C.RAD2DEG*d,this._needsUpdate=!0}update(e){null!=this.target&&this.autoUpdate&&this.lookAt(this.target.getWorldPosition(N)),this._needsUpdate&&(this._needsUpdate=!1,this.applier.applyYawPitch(this._yaw,this._pitch))}};VRMLookAt.EULER_ORDER="YXZ";let W=new n.Pa4(0,0,1),z=new n._fP,G=new n._fP,j=new n.USm(0,0,0,"YXZ");let VRMLookAtBoneApplier=class VRMLookAtBoneApplier{constructor(e,t,i,r,o){this.humanoid=e,this.rangeMapHorizontalInner=t,this.rangeMapHorizontalOuter=i,this.rangeMapVerticalDown=r,this.rangeMapVerticalUp=o,this.faceFront=new n.Pa4(0,0,1),this._restQuatLeftEye=new n._fP,this._restQuatRightEye=new n._fP,this._restLeftEyeParentWorldQuat=new n._fP,this._restRightEyeParentWorldQuat=new n._fP;let a=this.humanoid.getRawBoneNode("leftEye"),s=this.humanoid.getRawBoneNode("rightEye");a&&(this._restQuatLeftEye.copy(a.quaternion),getWorldQuaternionLite(a.parent,this._restLeftEyeParentWorldQuat)),s&&(this._restQuatRightEye.copy(s.quaternion),getWorldQuaternionLite(s.parent,this._restRightEyeParentWorldQuat))}applyYawPitch(e,t){let i=this.humanoid.getRawBoneNode("leftEye"),r=this.humanoid.getRawBoneNode("rightEye"),o=this.humanoid.getNormalizedBoneNode("leftEye"),a=this.humanoid.getNormalizedBoneNode("rightEye");i&&(t<0?j.x=-n.M8C.DEG2RAD*this.rangeMapVerticalDown.map(-t):j.x=n.M8C.DEG2RAD*this.rangeMapVerticalUp.map(t),e<0?j.y=-n.M8C.DEG2RAD*this.rangeMapHorizontalInner.map(-e):j.y=n.M8C.DEG2RAD*this.rangeMapHorizontalOuter.map(e),z.setFromEuler(j),this._getWorldFaceFrontQuat(G),o.quaternion.copy(G).multiply(z).multiply(G.invert()),z.copy(this._restLeftEyeParentWorldQuat),i.quaternion.copy(o.quaternion).multiply(z).premultiply(z.invert()).multiply(this._restQuatLeftEye)),r&&(t<0?j.x=-n.M8C.DEG2RAD*this.rangeMapVerticalDown.map(-t):j.x=n.M8C.DEG2RAD*this.rangeMapVerticalUp.map(t),e<0?j.y=-n.M8C.DEG2RAD*this.rangeMapHorizontalOuter.map(-e):j.y=n.M8C.DEG2RAD*this.rangeMapHorizontalInner.map(e),z.setFromEuler(j),this._getWorldFaceFrontQuat(G),a.quaternion.copy(G).multiply(z).multiply(G.invert()),z.copy(this._restRightEyeParentWorldQuat),r.quaternion.copy(a.quaternion).multiply(z).premultiply(z.invert()).multiply(this._restQuatRightEye))}lookAt(e){console.warn("VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.");let t=n.M8C.RAD2DEG*e.y,i=n.M8C.RAD2DEG*e.x;this.applyYawPitch(t,i)}_getWorldFaceFrontQuat(e){if(.01>this.faceFront.distanceToSquared(W))return e.identity();let[t,i]=calcAzimuthAltitude(this.faceFront);return j.set(0,.5*Math.PI+t,i,"YZX"),e.setFromEuler(j)}};VRMLookAtBoneApplier.type="bone";let VRMLookAtExpressionApplier=class VRMLookAtExpressionApplier{constructor(e,t,i,n,r){this.expressions=e,this.rangeMapHorizontalInner=t,this.rangeMapHorizontalOuter=i,this.rangeMapVerticalDown=n,this.rangeMapVerticalUp=r}applyYawPitch(e,t){t<0?(this.expressions.setValue("lookDown",0),this.expressions.setValue("lookUp",this.rangeMapVerticalUp.map(-t))):(this.expressions.setValue("lookUp",0),this.expressions.setValue("lookDown",this.rangeMapVerticalDown.map(t))),e<0?(this.expressions.setValue("lookLeft",0),this.expressions.setValue("lookRight",this.rangeMapHorizontalOuter.map(-e))):(this.expressions.setValue("lookRight",0),this.expressions.setValue("lookLeft",this.rangeMapHorizontalOuter.map(e)))}lookAt(e){console.warn("VRMLookAtBoneApplier: lookAt() is deprecated. use apply() instead.");let t=n.M8C.RAD2DEG*e.y,i=n.M8C.RAD2DEG*e.x;this.applyYawPitch(t,i)}};VRMLookAtExpressionApplier.type="expression";let VRMLookAtRangeMap=class VRMLookAtRangeMap{constructor(e,t){this.inputMaxValue=e,this.outputScale=t}map(e){return this.outputScale*saturate(e/this.inputMaxValue)}};let $=new Set(["1.0","1.0-beta"]);let VRMLookAtLoaderPlugin=class VRMLookAtLoaderPlugin{get name(){return"VRMLookAtLoaderPlugin"}constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot}afterRoot(e){return __awaiter$6(this,void 0,void 0,function*(){let t=e.userData.vrmHumanoid;if(null===t)return;if(void 0===t)throw Error("VRMLookAtLoaderPlugin: vrmHumanoid is undefined. VRMHumanoidLoaderPlugin have to be used first");let i=e.userData.vrmExpressionManager;if(null!==i){if(void 0===i)throw Error("VRMLookAtLoaderPlugin: vrmExpressionManager is undefined. VRMExpressionLoaderPlugin have to be used first");e.userData.vrmLookAt=yield this._import(e,t,i)}})}_import(e,t,i){return __awaiter$6(this,void 0,void 0,function*(){if(null==t||null==i)return null;let n=yield this._v1Import(e,t,i);if(n)return n;let r=yield this._v0Import(e,t,i);return r||null})}_v1Import(e,t,i){var n,r,o;return __awaiter$6(this,void 0,void 0,function*(){let e;let a=this.parser.json,s=(null===(n=a.extensionsUsed)||void 0===n?void 0:n.indexOf("VRMC_vrm"))!==-1;if(!s)return null;let l=null===(r=a.extensions)||void 0===r?void 0:r.VRMC_vrm;if(!l)return null;let u=l.specVersion;if(!$.has(u))return console.warn(`VRMLookAtLoaderPlugin: Unknown VRMC_vrm specVersion "${u}"`),null;let d=l.lookAt;if(!d)return null;let h="expression"===d.type?1:10,p=this._v1ImportRangeMap(d.rangeMapHorizontalInner,h),c=this._v1ImportRangeMap(d.rangeMapHorizontalOuter,h),m=this._v1ImportRangeMap(d.rangeMapVerticalDown,h),f=this._v1ImportRangeMap(d.rangeMapVerticalUp,h);e="expression"===d.type?new VRMLookAtExpressionApplier(i,p,c,m,f):new VRMLookAtBoneApplier(t,p,c,m,f);let g=this._importLookAt(t,e);return g.offsetFromHeadBone.fromArray(null!==(o=d.offsetFromHeadBone)&&void 0!==o?o:[0,.06,0]),g})}_v1ImportRangeMap(e,t){var i,n;let r=null!==(i=null==e?void 0:e.inputMaxValue)&&void 0!==i?i:90,o=null!==(n=null==e?void 0:e.outputScale)&&void 0!==n?n:t;return r<.01&&(console.warn("VRMLookAtLoaderPlugin: inputMaxValue of a range map is too small. Consider reviewing the range map!"),r=.01),new VRMLookAtRangeMap(r,o)}_v0Import(e,t,i){var n,r,o,a;return __awaiter$6(this,void 0,void 0,function*(){let e;let s=this.parser.json,l=null===(n=s.extensions)||void 0===n?void 0:n.VRM;if(!l)return null;let u=l.firstPerson;if(!u)return null;let d="BlendShape"===u.lookAtTypeName?1:10,h=this._v0ImportDegreeMap(u.lookAtHorizontalInner,d),p=this._v0ImportDegreeMap(u.lookAtHorizontalOuter,d),c=this._v0ImportDegreeMap(u.lookAtVerticalDown,d),m=this._v0ImportDegreeMap(u.lookAtVerticalUp,d);e="BlendShape"===u.lookAtTypeName?new VRMLookAtExpressionApplier(i,h,p,c,m):new VRMLookAtBoneApplier(t,h,p,c,m);let f=this._importLookAt(t,e);return u.firstPersonBoneOffset?f.offsetFromHeadBone.set(null!==(r=u.firstPersonBoneOffset.x)&&void 0!==r?r:0,null!==(o=u.firstPersonBoneOffset.y)&&void 0!==o?o:.06,-(null!==(a=u.firstPersonBoneOffset.z)&&void 0!==a?a:0)):f.offsetFromHeadBone.set(0,.06,0),f.faceFront.set(0,0,-1),e instanceof VRMLookAtBoneApplier&&e.faceFront.set(0,0,-1),f})}_v0ImportDegreeMap(e,t){var i,n;let r=null==e?void 0:e.curve;"[0,0,0,1,1,1,1,0]"!==JSON.stringify(r)&&console.warn("Curves of LookAtDegreeMap defined in VRM 0.0 are not supported");let o=null!==(i=null==e?void 0:e.xRange)&&void 0!==i?i:90,a=null!==(n=null==e?void 0:e.yRange)&&void 0!==n?n:t;return o<.01&&(console.warn("VRMLookAtLoaderPlugin: xRange of a degree map is too small. Consider reviewing the degree map!"),o=.01),new VRMLookAtRangeMap(o,a)}_importLookAt(e,t){let i=new VRMLookAt(e,t);if(this.helperRoot){let e=new VRMLookAtHelper(i);this.helperRoot.add(e),e.renderOrder=this.helperRoot.renderOrder}return i}};let X=new Set(["1.0","1.0-beta"]);let VRMMetaLoaderPlugin=class VRMMetaLoaderPlugin{get name(){return"VRMMetaLoaderPlugin"}constructor(e,t){var i,n,r;this.parser=e,this.needThumbnailImage=null===(i=null==t?void 0:t.needThumbnailImage)||void 0===i||i,this.acceptLicenseUrls=null!==(n=null==t?void 0:t.acceptLicenseUrls)&&void 0!==n?n:["https://vrm.dev/licenses/1.0/"],this.acceptV0Meta=null===(r=null==t?void 0:t.acceptV0Meta)||void 0===r||r}afterRoot(e){return __awaiter$6(this,void 0,void 0,function*(){e.userData.vrmMeta=yield this._import(e)})}_import(e){return __awaiter$6(this,void 0,void 0,function*(){let t=yield this._v1Import(e);if(null!=t)return t;let i=yield this._v0Import(e);return null!=i?i:null})}_v1Import(e){var t,i,n;return __awaiter$6(this,void 0,void 0,function*(){let e;let r=this.parser.json,o=(null===(t=r.extensionsUsed)||void 0===t?void 0:t.indexOf("VRMC_vrm"))!==-1;if(!o)return null;let a=null===(i=r.extensions)||void 0===i?void 0:i.VRMC_vrm;if(null==a)return null;let s=a.specVersion;if(!X.has(s))return console.warn(`VRMMetaLoaderPlugin: Unknown VRMC_vrm specVersion "${s}"`),null;let l=a.meta;if(!l)return null;let u=l.licenseUrl,d=new Set(this.acceptLicenseUrls);if(!d.has(u))throw Error(`VRMMetaLoaderPlugin: The license url "${u}" is not accepted`);return this.needThumbnailImage&&null!=l.thumbnailImage&&(e=null!==(n=yield this._extractGLTFImage(l.thumbnailImage))&&void 0!==n?n:void 0),{metaVersion:"1",name:l.name,version:l.version,authors:l.authors,copyrightInformation:l.copyrightInformation,contactInformation:l.contactInformation,references:l.references,thirdPartyLicenses:l.thirdPartyLicenses,thumbnailImage:e,licenseUrl:l.licenseUrl,avatarPermission:l.avatarPermission,allowExcessivelyViolentUsage:l.allowExcessivelyViolentUsage,allowExcessivelySexualUsage:l.allowExcessivelySexualUsage,commercialUsage:l.commercialUsage,allowPoliticalOrReligiousUsage:l.allowPoliticalOrReligiousUsage,allowAntisocialOrHateUsage:l.allowAntisocialOrHateUsage,creditNotation:l.creditNotation,allowRedistribution:l.allowRedistribution,modification:l.modification,otherLicenseUrl:l.otherLicenseUrl}})}_v0Import(e){var t;return __awaiter$6(this,void 0,void 0,function*(){let e;let i=this.parser.json,n=null===(t=i.extensions)||void 0===t?void 0:t.VRM;if(!n)return null;let r=n.meta;if(!r)return null;if(!this.acceptV0Meta)throw Error("VRMMetaLoaderPlugin: Attempted to load VRM0.0 meta but acceptV0Meta is false");return this.needThumbnailImage&&null!=r.texture&&-1!==r.texture&&(e=yield this.parser.getDependency("texture",r.texture)),{metaVersion:"0",allowedUserName:r.allowedUserName,author:r.author,commercialUssageName:r.commercialUssageName,contactInformation:r.contactInformation,licenseName:r.licenseName,otherLicenseUrl:r.otherLicenseUrl,otherPermissionUrl:r.otherPermissionUrl,reference:r.reference,sexualUssageName:r.sexualUssageName,texture:null!=e?e:void 0,title:r.title,version:r.version,violentUssageName:r.violentUssageName}})}_extractGLTFImage(e){var t;return __awaiter$6(this,void 0,void 0,function*(){var i,r;let o=this.parser.json,a=null===(t=o.images)||void 0===t?void 0:t[e];if(null==a)return console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${e}] of glTF as a thumbnail but the image doesn't exist`),null;let s=a.uri;if(null!=a.bufferView){let e=yield this.parser.getDependency("bufferView",a.bufferView),t=new Blob([e],{type:a.mimeType});s=URL.createObjectURL(t)}if(null==s)return console.warn(`VRMMetaLoaderPlugin: Attempt to use images[${e}] of glTF as a thumbnail but the image couldn't load properly`),null;let l=new n.S3k;return yield l.loadAsync((i=s,r=this.parser.options.path,"string"!=typeof i||""===i?"":(/^https?:\/\//i.test(r)&&/^\//.test(i)&&(r=r.replace(/(^https?:\/\/[^/]+).*/i,"$1")),/^(https?:)?\/\//i.test(i)||/^data:.*,.*$/i.test(i)||/^blob:.*$/i.test(i))?i:r+i)).catch(e=>(console.error(e),console.warn("VRMMetaLoaderPlugin: Failed to load a thumbnail image"),null))})}};let VRMCore=class VRMCore{constructor(e){this.scene=e.scene,this.meta=e.meta,this.humanoid=e.humanoid,this.expressionManager=e.expressionManager,this.firstPerson=e.firstPerson,this.lookAt=e.lookAt}update(e){this.humanoid.update(),this.lookAt&&this.lookAt.update(e),this.expressionManager&&this.expressionManager.update()}};let VRM=class VRM extends VRMCore{constructor(e){super(e),this.materials=e.materials,this.springBoneManager=e.springBoneManager,this.nodeConstraintManager=e.nodeConstraintManager}update(e){super.update(e),this.nodeConstraintManager&&this.nodeConstraintManager.update(),this.springBoneManager&&this.springBoneManager.update(e),this.materials&&this.materials.forEach(t=>{t.update&&t.update(e)})}};function __awaiter$5(e,t,i,n){return new(i||(i=Promise))(function(r,o){function fulfilled(e){try{step(n.next(e))}catch(e){o(e)}}function rejected(e){try{step(n.throw(e))}catch(e){o(e)}}function step(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(fulfilled,rejected)}step((n=n.apply(e,t||[])).next())})}/*!
 * @pixiv/three-vrm-materials-mtoon v2.1.2
 * MToon (toon material) module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2024 pixiv Inc.
 * @pixiv/three-vrm-materials-mtoon is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */function __awaiter$4(e,t,i,n){return new(i||(i=Promise))(function(r,o){function fulfilled(e){try{step(n.next(e))}catch(e){o(e)}}function rejected(e){try{step(n.throw(e))}catch(e){o(e)}}function step(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(fulfilled,rejected)}step((n=n.apply(e,t||[])).next())})}"function"==typeof SuppressedError&&SuppressedError,"function"==typeof SuppressedError&&SuppressedError;let Y={None:"none",WorldCoordinates:"worldCoordinates",ScreenCoordinates:"screenCoordinates"},q={3e3:"",3001:"srgb"};function getTextureColorSpace(e){return parseInt(n.UZH,10)>=152?e.colorSpace:q[e.encoding]}let MToonMaterial=class MToonMaterial extends n.jyz{get color(){return this.uniforms.litFactor.value}set color(e){this.uniforms.litFactor.value=e}get map(){return this.uniforms.map.value}set map(e){this.uniforms.map.value=e}get normalMap(){return this.uniforms.normalMap.value}set normalMap(e){this.uniforms.normalMap.value=e}get normalScale(){return this.uniforms.normalScale.value}set normalScale(e){this.uniforms.normalScale.value=e}get emissive(){return this.uniforms.emissive.value}set emissive(e){this.uniforms.emissive.value=e}get emissiveIntensity(){return this.uniforms.emissiveIntensity.value}set emissiveIntensity(e){this.uniforms.emissiveIntensity.value=e}get emissiveMap(){return this.uniforms.emissiveMap.value}set emissiveMap(e){this.uniforms.emissiveMap.value=e}get shadeColorFactor(){return this.uniforms.shadeColorFactor.value}set shadeColorFactor(e){this.uniforms.shadeColorFactor.value=e}get shadeMultiplyTexture(){return this.uniforms.shadeMultiplyTexture.value}set shadeMultiplyTexture(e){this.uniforms.shadeMultiplyTexture.value=e}get shadingShiftFactor(){return this.uniforms.shadingShiftFactor.value}set shadingShiftFactor(e){this.uniforms.shadingShiftFactor.value=e}get shadingShiftTexture(){return this.uniforms.shadingShiftTexture.value}set shadingShiftTexture(e){this.uniforms.shadingShiftTexture.value=e}get shadingShiftTextureScale(){return this.uniforms.shadingShiftTextureScale.value}set shadingShiftTextureScale(e){this.uniforms.shadingShiftTextureScale.value=e}get shadingToonyFactor(){return this.uniforms.shadingToonyFactor.value}set shadingToonyFactor(e){this.uniforms.shadingToonyFactor.value=e}get giEqualizationFactor(){return this.uniforms.giEqualizationFactor.value}set giEqualizationFactor(e){this.uniforms.giEqualizationFactor.value=e}get matcapFactor(){return this.uniforms.matcapFactor.value}set matcapFactor(e){this.uniforms.matcapFactor.value=e}get matcapTexture(){return this.uniforms.matcapTexture.value}set matcapTexture(e){this.uniforms.matcapTexture.value=e}get parametricRimColorFactor(){return this.uniforms.parametricRimColorFactor.value}set parametricRimColorFactor(e){this.uniforms.parametricRimColorFactor.value=e}get rimMultiplyTexture(){return this.uniforms.rimMultiplyTexture.value}set rimMultiplyTexture(e){this.uniforms.rimMultiplyTexture.value=e}get rimLightingMixFactor(){return this.uniforms.rimLightingMixFactor.value}set rimLightingMixFactor(e){this.uniforms.rimLightingMixFactor.value=e}get parametricRimFresnelPowerFactor(){return this.uniforms.parametricRimFresnelPowerFactor.value}set parametricRimFresnelPowerFactor(e){this.uniforms.parametricRimFresnelPowerFactor.value=e}get parametricRimLiftFactor(){return this.uniforms.parametricRimLiftFactor.value}set parametricRimLiftFactor(e){this.uniforms.parametricRimLiftFactor.value=e}get outlineWidthMultiplyTexture(){return this.uniforms.outlineWidthMultiplyTexture.value}set outlineWidthMultiplyTexture(e){this.uniforms.outlineWidthMultiplyTexture.value=e}get outlineWidthFactor(){return this.uniforms.outlineWidthFactor.value}set outlineWidthFactor(e){this.uniforms.outlineWidthFactor.value=e}get outlineColorFactor(){return this.uniforms.outlineColorFactor.value}set outlineColorFactor(e){this.uniforms.outlineColorFactor.value=e}get outlineLightingMixFactor(){return this.uniforms.outlineLightingMixFactor.value}set outlineLightingMixFactor(e){this.uniforms.outlineLightingMixFactor.value=e}get uvAnimationMaskTexture(){return this.uniforms.uvAnimationMaskTexture.value}set uvAnimationMaskTexture(e){this.uniforms.uvAnimationMaskTexture.value=e}get uvAnimationScrollXOffset(){return this.uniforms.uvAnimationScrollXOffset.value}set uvAnimationScrollXOffset(e){this.uniforms.uvAnimationScrollXOffset.value=e}get uvAnimationScrollYOffset(){return this.uniforms.uvAnimationScrollYOffset.value}set uvAnimationScrollYOffset(e){this.uniforms.uvAnimationScrollYOffset.value=e}get uvAnimationRotationPhase(){return this.uniforms.uvAnimationRotationPhase.value}set uvAnimationRotationPhase(e){this.uniforms.uvAnimationRotationPhase.value=e}get ignoreVertexColor(){return this._ignoreVertexColor}set ignoreVertexColor(e){this._ignoreVertexColor=e,this.needsUpdate=!0}get v0CompatShade(){return this._v0CompatShade}set v0CompatShade(e){this._v0CompatShade=e,this.needsUpdate=!0}get debugMode(){return this._debugMode}set debugMode(e){this._debugMode=e,this.needsUpdate=!0}get outlineWidthMode(){return this._outlineWidthMode}set outlineWidthMode(e){this._outlineWidthMode=e,this.needsUpdate=!0}get isOutline(){return this._isOutline}set isOutline(e){this._isOutline=e,this.needsUpdate=!0}get isMToonMaterial(){return!0}constructor(e={}){var t;super({vertexShader:"// #define PHONG\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n  varying vec3 vNormal;\n#endif\n\n#include <common>\n\n// #include <uv_pars_vertex>\n#ifdef MTOON_USE_UV\n  varying vec2 vUv;\n\n  // COMPAT: pre-r151 uses a common uvTransform\n  #if THREE_VRM_THREE_REVISION < 151\n    uniform mat3 uvTransform;\n  #endif\n#endif\n\n// #include <uv2_pars_vertex>\n// COMAPT: pre-r151 uses uv2 for lightMap and aoMap\n#if THREE_VRM_THREE_REVISION < 151\n  #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n    attribute vec2 uv2;\n    varying vec2 vUv2;\n    uniform mat3 uv2Transform;\n  #endif\n#endif\n\n// #include <displacementmap_pars_vertex>\n// #include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n#ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\n  uniform sampler2D outlineWidthMultiplyTexture;\n  uniform mat3 outlineWidthMultiplyTextureUvTransform;\n#endif\n\nuniform float outlineWidthFactor;\n\nvoid main() {\n\n  // #include <uv_vertex>\n  #ifdef MTOON_USE_UV\n    // COMPAT: pre-r151 uses a common uvTransform\n    #if THREE_VRM_THREE_REVISION >= 151\n      vUv = uv;\n    #else\n      vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n    #endif\n  #endif\n\n  // #include <uv2_vertex>\n  // COMAPT: pre-r151 uses uv2 for lightMap and aoMap\n  #if THREE_VRM_THREE_REVISION < 151\n    #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n      vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n    #endif\n  #endif\n\n  #include <color_vertex>\n\n  #include <beginnormal_vertex>\n  #include <morphnormal_vertex>\n  #include <skinbase_vertex>\n  #include <skinnormal_vertex>\n\n  // we need this to compute the outline properly\n  objectNormal = normalize( objectNormal );\n\n  #include <defaultnormal_vertex>\n\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n    vNormal = normalize( transformedNormal );\n  #endif\n\n  #include <begin_vertex>\n\n  #include <morphtarget_vertex>\n  #include <skinning_vertex>\n  // #include <displacementmap_vertex>\n  #include <project_vertex>\n  #include <logdepthbuf_vertex>\n  #include <clipping_planes_vertex>\n\n  vViewPosition = - mvPosition.xyz;\n\n  float outlineTex = 1.0;\n\n  #ifdef OUTLINE\n    #ifdef USE_OUTLINEWIDTHMULTIPLYTEXTURE\n      vec2 outlineWidthMultiplyTextureUv = ( outlineWidthMultiplyTextureUvTransform * vec3( vUv, 1 ) ).xy;\n      outlineTex = texture2D( outlineWidthMultiplyTexture, outlineWidthMultiplyTextureUv ).g;\n    #endif\n\n    #ifdef OUTLINE_WIDTH_WORLD\n      float worldNormalLength = length( transformedNormal );\n      vec3 outlineOffset = outlineWidthFactor * outlineTex * worldNormalLength * objectNormal;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( outlineOffset + transformed, 1.0 );\n    #endif\n\n    #ifdef OUTLINE_WIDTH_SCREEN\n      vec3 clipNormal = ( projectionMatrix * modelViewMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n      vec2 projectedNormal = normalize( clipNormal.xy );\n      projectedNormal.x *= projectionMatrix[ 0 ].x / projectionMatrix[ 1 ].y;\n      gl_Position.xy += 2.0 * outlineWidthFactor * outlineTex * projectedNormal.xy;\n    #endif\n\n    gl_Position.z += 1E-6 * gl_Position.w; // anti-artifact magic\n  #endif\n\n  #include <worldpos_vertex>\n  // #include <envmap_vertex>\n  #include <shadowmap_vertex>\n  #include <fog_vertex>\n\n}",fragmentShader:"// #define PHONG\n\nuniform vec3 litFactor;\n\nuniform float opacity;\n\nuniform vec3 shadeColorFactor;\n#ifdef USE_SHADEMULTIPLYTEXTURE\n  uniform sampler2D shadeMultiplyTexture;\n  uniform mat3 shadeMultiplyTextureUvTransform;\n#endif\n\nuniform float shadingShiftFactor;\nuniform float shadingToonyFactor;\n\n#ifdef USE_SHADINGSHIFTTEXTURE\n  uniform sampler2D shadingShiftTexture;\n  uniform mat3 shadingShiftTextureUvTransform;\n  uniform float shadingShiftTextureScale;\n#endif\n\nuniform float giEqualizationFactor;\n\nuniform vec3 parametricRimColorFactor;\n#ifdef USE_RIMMULTIPLYTEXTURE\n  uniform sampler2D rimMultiplyTexture;\n  uniform mat3 rimMultiplyTextureUvTransform;\n#endif\nuniform float rimLightingMixFactor;\nuniform float parametricRimFresnelPowerFactor;\nuniform float parametricRimLiftFactor;\n\n#ifdef USE_MATCAPTEXTURE\n  uniform vec3 matcapFactor;\n  uniform sampler2D matcapTexture;\n  uniform mat3 matcapTextureUvTransform;\n#endif\n\nuniform vec3 emissive;\nuniform float emissiveIntensity;\n\nuniform vec3 outlineColorFactor;\nuniform float outlineLightingMixFactor;\n\n#ifdef USE_UVANIMATIONMASKTEXTURE\n  uniform sampler2D uvAnimationMaskTexture;\n  uniform mat3 uvAnimationMaskTextureUvTransform;\n#endif\n\nuniform float uvAnimationScrollXOffset;\nuniform float uvAnimationScrollYOffset;\nuniform float uvAnimationRotationPhase;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n\n// #include <uv_pars_fragment>\n#if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n  varying vec2 vUv;\n#endif\n\n// #include <uv2_pars_fragment>\n// COMAPT: pre-r151 uses uv2 for lightMap and aoMap\n#if THREE_VRM_THREE_REVISION < 151\n  #if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n    varying vec2 vUv2;\n  #endif\n#endif\n\n#include <map_pars_fragment>\n\n#ifdef USE_MAP\n  uniform mat3 mapUvTransform;\n#endif\n\n// #include <alphamap_pars_fragment>\n\n#if THREE_VRM_THREE_REVISION >= 132\n  #include <alphatest_pars_fragment>\n#endif\n\n#include <aomap_pars_fragment>\n// #include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n\n#ifdef USE_EMISSIVEMAP\n  uniform mat3 emissiveMapUvTransform;\n#endif\n\n// #include <envmap_common_pars_fragment>\n// #include <envmap_pars_fragment>\n// #include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n\n// #include <bsdfs>\n// COMPAT: pre-r151 doesn't have BRDF_Lambert in <common>\n#if THREE_VRM_THREE_REVISION < 151\n  vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n    return RECIPROCAL_PI * diffuseColor;\n  }\n#endif\n\n#include <lights_pars_begin>\n\n#if THREE_VRM_THREE_REVISION >= 132\n  #include <normal_pars_fragment>\n#endif\n\n// #include <lights_phong_pars_fragment>\nvarying vec3 vViewPosition;\n\n#if THREE_VRM_THREE_REVISION < 132\n  #ifndef FLAT_SHADED\n    varying vec3 vNormal;\n  #endif\n#endif\n\nstruct MToonMaterial {\n  vec3 diffuseColor;\n  vec3 shadeColor;\n  float shadingShift;\n};\n\nfloat linearstep( float a, float b, float t ) {\n  return clamp( ( t - a ) / ( b - a ), 0.0, 1.0 );\n}\n\n/**\n * Convert NdotL into toon shading factor using shadingShift and shadingToony\n */\nfloat getShading(\n  const in float dotNL,\n  const in float shadow,\n  const in float shadingShift\n) {\n  float shading = dotNL;\n  shading = shading + shadingShift;\n  shading = linearstep( -1.0 + shadingToonyFactor, 1.0 - shadingToonyFactor, shading );\n  shading *= shadow;\n  return shading;\n}\n\n/**\n * Mix diffuseColor and shadeColor using shading factor and light color\n */\nvec3 getDiffuse(\n  const in MToonMaterial material,\n  const in float shading,\n  in vec3 lightColor\n) {\n  #ifdef DEBUG_LITSHADERATE\n    return vec3( BRDF_Lambert( shading * lightColor ) );\n  #endif\n\n  #if THREE_VRM_THREE_REVISION < 132\n    #ifndef PHYSICALLY_CORRECT_LIGHTS\n      lightColor *= PI;\n    #endif\n  #endif\n\n  vec3 col = lightColor * BRDF_Lambert( mix( material.shadeColor, material.diffuseColor, shading ) );\n\n  // The \"comment out if you want to PBR absolutely\" line\n  #ifdef V0_COMPAT_SHADE\n    col = min( col, material.diffuseColor );\n  #endif\n\n  return col;\n}\n\n// COMPAT: pre-r156 uses a struct GeometricContext\n#if THREE_VRM_THREE_REVISION >= 157\n  void RE_Direct_MToon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in MToonMaterial material, const in float shadow, inout ReflectedLight reflectedLight ) {\n    float dotNL = clamp( dot( geometryNormal, directLight.direction ), -1.0, 1.0 );\n    vec3 irradiance = directLight.color;\n\n    // directSpecular will be used for rim lighting, not an actual specular\n    reflectedLight.directSpecular += irradiance;\n\n    irradiance *= dotNL;\n\n    float shading = getShading( dotNL, shadow, material.shadingShift );\n\n    // toon shaded diffuse\n    reflectedLight.directDiffuse += getDiffuse( material, shading, directLight.color );\n  }\n\n  void RE_IndirectDiffuse_MToon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in MToonMaterial material, inout ReflectedLight reflectedLight ) {\n    // indirect diffuse will use diffuseColor, no shadeColor involved\n    reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n    // directSpecular will be used for rim lighting, not an actual specular\n    reflectedLight.directSpecular += irradiance;\n  }\n#else\n  void RE_Direct_MToon( const in IncidentLight directLight, const in GeometricContext geometry, const in MToonMaterial material, const in float shadow, inout ReflectedLight reflectedLight ) {\n    float dotNL = clamp( dot( geometry.normal, directLight.direction ), -1.0, 1.0 );\n    vec3 irradiance = directLight.color;\n\n    #if THREE_VRM_THREE_REVISION < 132\n      #ifndef PHYSICALLY_CORRECT_LIGHTS\n        irradiance *= PI;\n      #endif\n    #endif\n\n    // directSpecular will be used for rim lighting, not an actual specular\n    reflectedLight.directSpecular += irradiance;\n\n    irradiance *= dotNL;\n\n    float shading = getShading( dotNL, shadow, material.shadingShift );\n\n    // toon shaded diffuse\n    reflectedLight.directDiffuse += getDiffuse( material, shading, directLight.color );\n  }\n\n  void RE_IndirectDiffuse_MToon( const in vec3 irradiance, const in GeometricContext geometry, const in MToonMaterial material, inout ReflectedLight reflectedLight ) {\n    // indirect diffuse will use diffuseColor, no shadeColor involved\n    reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n    // directSpecular will be used for rim lighting, not an actual specular\n    reflectedLight.directSpecular += irradiance;\n  }\n#endif\n\n#define RE_Direct RE_Direct_MToon\n#define RE_IndirectDiffuse RE_IndirectDiffuse_MToon\n#define Material_LightProbeLOD( material ) (0)\n\n#include <shadowmap_pars_fragment>\n// #include <bumpmap_pars_fragment>\n\n// #include <normalmap_pars_fragment>\n#ifdef USE_NORMALMAP\n\n  uniform sampler2D normalMap;\n  uniform mat3 normalMapUvTransform;\n  uniform vec2 normalScale;\n\n#endif\n\n// COMPAT: USE_NORMALMAP_OBJECTSPACE used to be OBJECTSPACE_NORMALMAP in pre-r151\n#if defined( USE_NORMALMAP_OBJECTSPACE ) || defined( OBJECTSPACE_NORMALMAP )\n\n  uniform mat3 normalMatrix;\n\n#endif\n\n// COMPAT: USE_NORMALMAP_TANGENTSPACE used to be TANGENTSPACE_NORMALMAP in pre-r151\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( TANGENTSPACE_NORMALMAP ) )\n\n  // Per-Pixel Tangent Space Normal Mapping\n  // http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n  // three-vrm specific change: it requires `uv` as an input in order to support uv scrolls\n\n  // Temporary compat against shader change @ Three.js r126, r151\n  #if THREE_VRM_THREE_REVISION >= 151\n\n    mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\n      vec3 q0 = dFdx( eye_pos.xyz );\n      vec3 q1 = dFdy( eye_pos.xyz );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      vec3 N = surf_norm;\n\n      vec3 q1perp = cross( q1, N );\n      vec3 q0perp = cross( N, q0 );\n\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\n\n      float det = max( dot( T, T ), dot( B, B ) );\n      float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\n      return mat3( T * scale, B * scale, N );\n\n    }\n\n  #elif THREE_VRM_THREE_REVISION >= 126\n\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      vec3 N = normalize( surf_norm );\n\n      vec3 q1perp = cross( q1, N );\n      vec3 q0perp = cross( N, q0 );\n\n      vec3 T = q1perp * st0.x + q0perp * st1.x;\n      vec3 B = q1perp * st0.y + q0perp * st1.y;\n\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\n      // TODO: Is this still required? Or shall I make a PR about it?\n      if ( length( T ) == 0.0 || length( B ) == 0.0 ) {\n        return surf_norm;\n      }\n\n      float det = max( dot( T, T ), dot( B, B ) );\n      float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\n      return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\n    }\n\n  #else\n\n    vec3 perturbNormal2Arb( vec2 uv, vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\n      // Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n      vec2 st0 = dFdx( uv.st );\n      vec2 st1 = dFdy( uv.st );\n\n      float scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\n\n      vec3 S = ( q0 * st1.t - q1 * st0.t ) * scale;\n      vec3 T = ( - q0 * st1.s + q1 * st0.s ) * scale;\n\n      // three-vrm specific change: Workaround for the issue that happens when delta of uv = 0.0\n      // TODO: Is this still required? Or shall I make a PR about it?\n\n      if ( length( S ) == 0.0 || length( T ) == 0.0 ) {\n        return surf_norm;\n      }\n\n      S = normalize( S );\n      T = normalize( T );\n      vec3 N = normalize( surf_norm );\n\n      #ifdef DOUBLE_SIDED\n\n        // Workaround for Adreno GPUs gl_FrontFacing bug. See #15850 and #10331\n\n        bool frontFacing = dot( cross( S, T ), N ) > 0.0;\n\n        mapN.xy *= ( float( frontFacing ) * 2.0 - 1.0 );\n\n      #else\n\n        mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n      #endif\n\n      mat3 tsn = mat3( S, T, N );\n      return normalize( tsn * mapN );\n\n    }\n\n  #endif\n\n#endif\n\n// #include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n// == post correction ==========================================================\nvoid postCorrection() {\n  #include <tonemapping_fragment>\n  #include <colorspace_fragment>\n  #include <fog_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <dithering_fragment>\n}\n\n// == main procedure ===========================================================\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec2 uv = vec2(0.5, 0.5);\n\n  #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n    uv = vUv;\n\n    float uvAnimMask = 1.0;\n    #ifdef USE_UVANIMATIONMASKTEXTURE\n      vec2 uvAnimationMaskTextureUv = ( uvAnimationMaskTextureUvTransform * vec3( uv, 1 ) ).xy;\n      uvAnimMask = texture2D( uvAnimationMaskTexture, uvAnimationMaskTextureUv ).b;\n    #endif\n\n    float uvRotCos = cos( uvAnimationRotationPhase * uvAnimMask );\n    float uvRotSin = sin( uvAnimationRotationPhase * uvAnimMask );\n    uv = mat2( uvRotCos, -uvRotSin, uvRotSin, uvRotCos ) * ( uv - 0.5 ) + 0.5;\n    uv = uv + vec2( uvAnimationScrollXOffset, uvAnimationScrollYOffset ) * uvAnimMask;\n  #endif\n\n  #ifdef DEBUG_UV\n    gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n    #if ( defined( MTOON_USE_UV ) && !defined( MTOON_UVS_VERTEX_ONLY ) )\n      gl_FragColor = vec4( uv, 0.0, 1.0 );\n    #endif\n    return;\n  #endif\n\n  vec4 diffuseColor = vec4( litFactor, opacity );\n  ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n  vec3 totalEmissiveRadiance = emissive * emissiveIntensity;\n\n  #include <logdepthbuf_fragment>\n\n  // #include <map_fragment>\n  #ifdef USE_MAP\n    vec2 mapUv = ( mapUvTransform * vec3( uv, 1 ) ).xy;\n    vec4 sampledDiffuseColor = texture2D( map, mapUv );\n    #ifdef DECODE_VIDEO_TEXTURE\n      sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n    #endif\n    diffuseColor *= sampledDiffuseColor;\n  #endif\n\n  // #include <color_fragment>\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\n    diffuseColor.rgb *= vColor;\n  #endif\n\n  // #include <alphamap_fragment>\n\n  #include <alphatest_fragment>\n\n  // #include <specularmap_fragment>\n\n  // #include <normal_fragment_begin>\n  float faceDirection = gl_FrontFacing ? 1.0 : -1.0;\n\n  #ifdef FLAT_SHADED\n\n    vec3 fdx = dFdx( vViewPosition );\n    vec3 fdy = dFdy( vViewPosition );\n    vec3 normal = normalize( cross( fdx, fdy ) );\n\n  #else\n\n    vec3 normal = normalize( vNormal );\n\n    #ifdef DOUBLE_SIDED\n\n      normal *= faceDirection;\n\n    #endif\n\n  #endif\n\n  #ifdef USE_NORMALMAP\n\n    vec2 normalMapUv = ( normalMapUvTransform * vec3( uv, 1 ) ).xy;\n\n  #endif\n\n  #ifdef USE_NORMALMAP_TANGENTSPACE\n\n    #ifdef USE_TANGENT\n\n      mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\n    #else\n\n      mat3 tbn = getTangentFrame( - vViewPosition, normal, normalMapUv );\n\n    #endif\n\n    #if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\n      tbn[0] *= faceDirection;\n      tbn[1] *= faceDirection;\n\n    #endif\n\n  #endif\n\n  #ifdef USE_CLEARCOAT_NORMALMAP\n\n    #ifdef USE_TANGENT\n\n      mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\n    #else\n\n      mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\n    #endif\n\n    #if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\n      tbn2[0] *= faceDirection;\n      tbn2[1] *= faceDirection;\n\n    #endif\n\n  #endif\n\n  // non perturbed normal for clearcoat among others\n\n  vec3 nonPerturbedNormal = normal;\n\n  #ifdef OUTLINE\n    normal *= -1.0;\n  #endif\n\n  // #include <normal_fragment_maps>\n\n  // COMPAT: USE_NORMALMAP_OBJECTSPACE used to be OBJECTSPACE_NORMALMAP in pre-r151\n  #if defined( USE_NORMALMAP_OBJECTSPACE ) || defined( OBJECTSPACE_NORMALMAP )\n\n    normal = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n    #ifdef FLIP_SIDED\n\n      normal = - normal;\n\n    #endif\n\n    #ifdef DOUBLE_SIDED\n\n      // Temporary compat against shader change @ Three.js r126\n      // See: #21205, #21307, #21299\n      #if THREE_VRM_THREE_REVISION >= 126\n\n        normal = normal * faceDirection;\n\n      #else\n\n        normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\n      #endif\n\n    #endif\n\n    normal = normalize( normalMatrix * normal );\n\n  // COMPAT: USE_NORMALMAP_TANGENTSPACE used to be TANGENTSPACE_NORMALMAP in pre-r151\n  #elif defined( USE_NORMALMAP_TANGENTSPACE ) || defined( TANGENTSPACE_NORMALMAP )\n\n    vec3 mapN = texture2D( normalMap, normalMapUv ).xyz * 2.0 - 1.0;\n    mapN.xy *= normalScale;\n\n    // COMPAT: pre-r151\n    #if THREE_VRM_THREE_REVISION >= 151 || defined( USE_TANGENT )\n\n      normal = normalize( tbn * mapN );\n\n    #else\n\n      // pre-r126\n      #if THREE_VRM_THREE_REVISION >= 126\n\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN, faceDirection );\n\n      #else\n\n        normal = perturbNormal2Arb( uv, -vViewPosition, normal, mapN );\n\n      #endif\n\n    #endif\n\n  #endif\n\n  // #include <emissivemap_fragment>\n  #ifdef USE_EMISSIVEMAP\n    vec2 emissiveMapUv = ( emissiveMapUvTransform * vec3( uv, 1 ) ).xy;\n    totalEmissiveRadiance *= texture2D( emissiveMap, emissiveMapUv ).rgb;\n  #endif\n\n  #ifdef DEBUG_NORMAL\n    gl_FragColor = vec4( 0.5 + 0.5 * normal, 1.0 );\n    return;\n  #endif\n\n  // -- MToon: lighting --------------------------------------------------------\n  // accumulation\n  // #include <lights_phong_fragment>\n  MToonMaterial material;\n\n  material.diffuseColor = diffuseColor.rgb;\n\n  material.shadeColor = shadeColorFactor;\n  #ifdef USE_SHADEMULTIPLYTEXTURE\n    vec2 shadeMultiplyTextureUv = ( shadeMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\n    material.shadeColor *= texture2D( shadeMultiplyTexture, shadeMultiplyTextureUv ).rgb;\n  #endif\n\n  #if ( defined( USE_COLOR ) && !defined( IGNORE_VERTEX_COLOR ) )\n    material.shadeColor.rgb *= vColor;\n  #endif\n\n  material.shadingShift = shadingShiftFactor;\n  #ifdef USE_SHADINGSHIFTTEXTURE\n    vec2 shadingShiftTextureUv = ( shadingShiftTextureUvTransform * vec3( uv, 1 ) ).xy;\n    material.shadingShift += texture2D( shadingShiftTexture, shadingShiftTextureUv ).r * shadingShiftTextureScale;\n  #endif\n\n  // #include <lights_fragment_begin>\n\n  // MToon Specific changes:\n  // Since we want to take shadows into account of shading instead of irradiance,\n  // we had to modify the codes that multiplies the results of shadowmap into color of direct lights.\n\n  // COMPAT: pre-r156 uses a struct GeometricContext\n  #if THREE_VRM_THREE_REVISION >= 157\n    vec3 geometryPosition = - vViewPosition;\n    vec3 geometryNormal = normal;\n    vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n    vec3 geometryClearcoatNormal;\n\n    #ifdef USE_CLEARCOAT\n\n      geometryClearcoatNormal = clearcoatNormal;\n\n    #endif\n  #else\n    GeometricContext geometry;\n\n    geometry.position = - vViewPosition;\n    geometry.normal = normal;\n    geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n    #ifdef USE_CLEARCOAT\n\n      geometry.clearcoatNormal = clearcoatNormal;\n\n    #endif\n  #endif\n\n  IncidentLight directLight;\n\n  // since these variables will be used in unrolled loop, we have to define in prior\n  float shadow;\n\n  #if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n    PointLight pointLight;\n    #if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n    PointLightShadow pointLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n      pointLight = pointLights[ i ];\n\n      // COMPAT: pre-r156 uses a struct GeometricContext\n      #if THREE_VRM_THREE_REVISION >= 157\n        getPointLightInfo( pointLight, geometryPosition, directLight );\n      #elif THREE_VRM_THREE_REVISION >= 132\n        getPointLightInfo( pointLight, geometry, directLight );\n      #else\n        getPointDirectLightIrradiance( pointLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n      pointLightShadow = pointLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n      #endif\n\n      // COMPAT: pre-r156 uses a struct GeometricContext\n      #if THREE_VRM_THREE_REVISION >= 157\n        RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, shadow, reflectedLight );\n      #else\n        RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n      #endif\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  #if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n    SpotLight spotLight;\n    #if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n    SpotLightShadow spotLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n      spotLight = spotLights[ i ];\n\n      // COMPAT: pre-r156 uses a struct GeometricContext\n      #if THREE_VRM_THREE_REVISION >= 157\n        getSpotLightInfo( spotLight, geometryPosition, directLight );\n      #elif THREE_VRM_THREE_REVISION >= 132\n        getSpotLightInfo( spotLight, geometry, directLight );\n      #else\n        getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n      spotLightShadow = spotLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n      #endif\n\n      // COMPAT: pre-r156 uses a struct GeometricContext\n      #if THREE_VRM_THREE_REVISION >= 157\n        RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, shadow, reflectedLight );\n      #else\n        RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n      #endif\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  #if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n    DirectionalLight directionalLight;\n    #if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n    DirectionalLightShadow directionalLightShadow;\n    #endif\n\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n      directionalLight = directionalLights[ i ];\n\n      // COMPAT: pre-r156 uses a struct GeometricContext\n      #if THREE_VRM_THREE_REVISION >= 157\n        getDirectionalLightInfo( directionalLight, directLight );\n      #elif THREE_VRM_THREE_REVISION >= 132\n        getDirectionalLightInfo( directionalLight, geometry, directLight );\n      #else\n        getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n      #endif\n\n      shadow = 1.0;\n      #if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n      directionalLightShadow = directionalLightShadows[ i ];\n      shadow = all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n      #endif\n\n      // COMPAT: pre-r156 uses a struct GeometricContext\n      #if THREE_VRM_THREE_REVISION >= 157\n        RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, shadow, reflectedLight );\n      #else\n        RE_Direct( directLight, geometry, material, shadow, reflectedLight );\n      #endif\n\n    }\n    #pragma unroll_loop_end\n\n  #endif\n\n  // #if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n  //   RectAreaLight rectAreaLight;\n\n  //   #pragma unroll_loop_start\n  //   for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n  //     rectAreaLight = rectAreaLights[ i ];\n  //     RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n  //   }\n  //   #pragma unroll_loop_end\n\n  // #endif\n\n  #if defined( RE_IndirectDiffuse )\n\n    vec3 iblIrradiance = vec3( 0.0 );\n\n    vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n    // COMPAT: pre-r156 uses a struct GeometricContext\n    // COMPAT: pre-r156 doesn't have a define USE_LIGHT_PROBES\n    #if THREE_VRM_THREE_REVISION >= 157\n      #if defined( USE_LIGHT_PROBES )\n        irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n      #endif\n    #elif THREE_VRM_THREE_REVISION >= 133\n      irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n    #else\n      irradiance += getLightProbeIrradiance( lightProbe, geometry );\n    #endif\n\n    #if ( NUM_HEMI_LIGHTS > 0 )\n\n      #pragma unroll_loop_start\n      for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n        // COMPAT: pre-r156 uses a struct GeometricContext\n        #if THREE_VRM_THREE_REVISION >= 157\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n        #elif THREE_VRM_THREE_REVISION >= 133\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n        #else\n          irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n        #endif\n\n      }\n      #pragma unroll_loop_end\n\n    #endif\n\n  #endif\n\n  // #if defined( RE_IndirectSpecular )\n\n  //   vec3 radiance = vec3( 0.0 );\n  //   vec3 clearcoatRadiance = vec3( 0.0 );\n\n  // #endif\n\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n\n  // modulation\n  #include <aomap_fragment>\n\n  vec3 col = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\n  #ifdef DEBUG_LITSHADERATE\n    gl_FragColor = vec4( col, diffuseColor.a );\n    postCorrection();\n    return;\n  #endif\n\n  // -- MToon: rim lighting -----------------------------------------\n  vec3 viewDir = normalize( vViewPosition );\n\n  #ifndef PHYSICALLY_CORRECT_LIGHTS\n    reflectedLight.directSpecular /= PI;\n  #endif\n  vec3 rimMix = mix( vec3( 1.0 ), reflectedLight.directSpecular, 1.0 );\n\n  vec3 rim = parametricRimColorFactor * pow( saturate( 1.0 - dot( viewDir, normal ) + parametricRimLiftFactor ), parametricRimFresnelPowerFactor );\n\n  #ifdef USE_MATCAPTEXTURE\n    {\n      vec3 x = normalize( vec3( viewDir.z, 0.0, -viewDir.x ) );\n      vec3 y = cross( viewDir, x ); // guaranteed to be normalized\n      vec2 sphereUv = 0.5 + 0.5 * vec2( dot( x, normal ), -dot( y, normal ) );\n      sphereUv = ( matcapTextureUvTransform * vec3( sphereUv, 1 ) ).xy;\n      vec3 matcap = texture2D( matcapTexture, sphereUv ).rgb;\n      rim += matcapFactor * matcap;\n    }\n  #endif\n\n  #ifdef USE_RIMMULTIPLYTEXTURE\n    vec2 rimMultiplyTextureUv = ( rimMultiplyTextureUvTransform * vec3( uv, 1 ) ).xy;\n    rim *= texture2D( rimMultiplyTexture, rimMultiplyTextureUv ).rgb;\n  #endif\n\n  col += rimMix * rim;\n\n  // -- MToon: Emission --------------------------------------------------------\n  col += totalEmissiveRadiance;\n\n  // #include <envmap_fragment>\n\n  // -- Almost done! -----------------------------------------------------------\n  #if defined( OUTLINE )\n    col = outlineColorFactor.rgb * mix( vec3( 1.0 ), col, outlineLightingMixFactor );\n  #endif\n\n  #ifdef OPAQUE\n    diffuseColor.a = 1.0;\n  #endif\n\n  gl_FragColor = vec4( col, diffuseColor.a );\n  postCorrection();\n}\n"}),this.uvAnimationScrollXSpeedFactor=0,this.uvAnimationScrollYSpeedFactor=0,this.uvAnimationRotationSpeedFactor=0,this.fog=!0,this.normalMapType=n.IOt,this._ignoreVertexColor=!0,this._v0CompatShade=!1,this._debugMode="none",this._outlineWidthMode=Y.None,this._isOutline=!1,e.transparentWithZWrite&&(e.depthWrite=!0),delete e.transparentWithZWrite,e.fog=!0,e.lights=!0,e.clipping=!0,129>parseInt(n.UZH,10)&&(e.skinning=e.skinning||!1),131>parseInt(n.UZH,10)&&(e.morphTargets=e.morphTargets||!1,e.morphNormals=e.morphNormals||!1),this.uniforms=n.rDY.merge([n.rBU.common,n.rBU.normalmap,n.rBU.emissivemap,n.rBU.fog,n.rBU.lights,{litFactor:{value:new n.Ilk(1,1,1)},mapUvTransform:{value:new n.Vkp},colorAlpha:{value:1},normalMapUvTransform:{value:new n.Vkp},shadeColorFactor:{value:new n.Ilk(0,0,0)},shadeMultiplyTexture:{value:null},shadeMultiplyTextureUvTransform:{value:new n.Vkp},shadingShiftFactor:{value:0},shadingShiftTexture:{value:null},shadingShiftTextureUvTransform:{value:new n.Vkp},shadingShiftTextureScale:{value:1},shadingToonyFactor:{value:.9},giEqualizationFactor:{value:.9},matcapFactor:{value:new n.Ilk(1,1,1)},matcapTexture:{value:null},matcapTextureUvTransform:{value:new n.Vkp},parametricRimColorFactor:{value:new n.Ilk(0,0,0)},rimMultiplyTexture:{value:null},rimMultiplyTextureUvTransform:{value:new n.Vkp},rimLightingMixFactor:{value:1},parametricRimFresnelPowerFactor:{value:5},parametricRimLiftFactor:{value:0},emissive:{value:new n.Ilk(0,0,0)},emissiveIntensity:{value:1},emissiveMapUvTransform:{value:new n.Vkp},outlineWidthMultiplyTexture:{value:null},outlineWidthMultiplyTextureUvTransform:{value:new n.Vkp},outlineWidthFactor:{value:0},outlineColorFactor:{value:new n.Ilk(0,0,0)},outlineLightingMixFactor:{value:1},uvAnimationMaskTexture:{value:null},uvAnimationMaskTextureUvTransform:{value:new n.Vkp},uvAnimationScrollXOffset:{value:0},uvAnimationScrollYOffset:{value:0},uvAnimationRotationPhase:{value:0}},null!==(t=e.uniforms)&&void 0!==t?t:{}]),this.setValues(e),this._uploadUniformsWorkaround(),this.customProgramCacheKey=()=>[...Object.entries(this._generateDefines()).map(([e,t])=>`${e}:${t}`),this.matcapTexture?`matcapTextureColorSpace:${getTextureColorSpace(this.matcapTexture)}`:"",this.shadeMultiplyTexture?`shadeMultiplyTextureColorSpace:${getTextureColorSpace(this.shadeMultiplyTexture)}`:"",this.rimMultiplyTexture?`rimMultiplyTextureColorSpace:${getTextureColorSpace(this.rimMultiplyTexture)}`:""].join(","),this.onBeforeCompile=e=>{let t=parseInt(n.UZH,10),i=Object.entries(Object.assign(Object.assign({},this._generateDefines()),this.defines)).filter(([e,t])=>!!t).map(([e,t])=>`#define ${e} ${t}`).join("\n")+"\n";e.vertexShader=i+e.vertexShader,e.fragmentShader=i+e.fragmentShader,t<154&&(e.fragmentShader=e.fragmentShader.replace("#include <colorspace_fragment>","#include <encodings_fragment>")),t<132&&(e.fragmentShader=e.fragmentShader.replace("#include <normal_pars_fragment>",""),e.fragmentShader=e.fragmentShader.replace("#include <alphatest_pars_fragment>",""))}}update(e){this._uploadUniformsWorkaround(),this._updateUVAnimation(e)}copy(e){return super.copy(e),this.map=e.map,this.normalMap=e.normalMap,this.emissiveMap=e.emissiveMap,this.shadeMultiplyTexture=e.shadeMultiplyTexture,this.shadingShiftTexture=e.shadingShiftTexture,this.matcapTexture=e.matcapTexture,this.rimMultiplyTexture=e.rimMultiplyTexture,this.outlineWidthMultiplyTexture=e.outlineWidthMultiplyTexture,this.uvAnimationMaskTexture=e.uvAnimationMaskTexture,this.normalMapType=e.normalMapType,this.uvAnimationScrollXSpeedFactor=e.uvAnimationScrollXSpeedFactor,this.uvAnimationScrollYSpeedFactor=e.uvAnimationScrollYSpeedFactor,this.uvAnimationRotationSpeedFactor=e.uvAnimationRotationSpeedFactor,this.ignoreVertexColor=e.ignoreVertexColor,this.v0CompatShade=e.v0CompatShade,this.debugMode=e.debugMode,this.outlineWidthMode=e.outlineWidthMode,this.isOutline=e.isOutline,this.needsUpdate=!0,this}_updateUVAnimation(e){this.uniforms.uvAnimationScrollXOffset.value+=e*this.uvAnimationScrollXSpeedFactor,this.uniforms.uvAnimationScrollYOffset.value+=e*this.uvAnimationScrollYSpeedFactor,this.uniforms.uvAnimationRotationPhase.value+=e*this.uvAnimationRotationSpeedFactor,this.uniformsNeedUpdate=!0}_uploadUniformsWorkaround(){this.uniforms.opacity.value=this.opacity,this._updateTextureMatrix(this.uniforms.map,this.uniforms.mapUvTransform),this._updateTextureMatrix(this.uniforms.normalMap,this.uniforms.normalMapUvTransform),this._updateTextureMatrix(this.uniforms.emissiveMap,this.uniforms.emissiveMapUvTransform),this._updateTextureMatrix(this.uniforms.shadeMultiplyTexture,this.uniforms.shadeMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.shadingShiftTexture,this.uniforms.shadingShiftTextureUvTransform),this._updateTextureMatrix(this.uniforms.matcapTexture,this.uniforms.matcapTextureUvTransform),this._updateTextureMatrix(this.uniforms.rimMultiplyTexture,this.uniforms.rimMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.outlineWidthMultiplyTexture,this.uniforms.outlineWidthMultiplyTextureUvTransform),this._updateTextureMatrix(this.uniforms.uvAnimationMaskTexture,this.uniforms.uvAnimationMaskTextureUvTransform);let e=parseInt(n.UZH,10);e>=132&&(this.uniforms.alphaTest.value=this.alphaTest),this.uniformsNeedUpdate=!0}_generateDefines(){let e=parseInt(n.UZH,10),t=null!==this.outlineWidthMultiplyTexture,i=null!==this.map||null!==this.emissiveMap||null!==this.shadeMultiplyTexture||null!==this.shadingShiftTexture||null!==this.rimMultiplyTexture||null!==this.uvAnimationMaskTexture;return{THREE_VRM_THREE_REVISION:e,OUTLINE:this._isOutline,MTOON_USE_UV:t||i,MTOON_UVS_VERTEX_ONLY:t&&!i,V0_COMPAT_SHADE:this._v0CompatShade,USE_SHADEMULTIPLYTEXTURE:null!==this.shadeMultiplyTexture,USE_SHADINGSHIFTTEXTURE:null!==this.shadingShiftTexture,USE_MATCAPTEXTURE:null!==this.matcapTexture,USE_RIMMULTIPLYTEXTURE:null!==this.rimMultiplyTexture,USE_OUTLINEWIDTHMULTIPLYTEXTURE:this._isOutline&&null!==this.outlineWidthMultiplyTexture,USE_UVANIMATIONMASKTEXTURE:null!==this.uvAnimationMaskTexture,IGNORE_VERTEX_COLOR:!0===this._ignoreVertexColor,DEBUG_NORMAL:"normal"===this._debugMode,DEBUG_LITSHADERATE:"litShadeRate"===this._debugMode,DEBUG_UV:"uv"===this._debugMode,OUTLINE_WIDTH_WORLD:this._isOutline&&this._outlineWidthMode===Y.WorldCoordinates,OUTLINE_WIDTH_SCREEN:this._isOutline&&this._outlineWidthMode===Y.ScreenCoordinates}}_updateTextureMatrix(e,t){e.value&&(e.value.matrixAutoUpdate&&e.value.updateMatrix(),t.value.copy(e.value.matrix))}};let Q={"":3e3,srgb:3001};let GLTFMToonMaterialParamsAssignHelper=class GLTFMToonMaterialParamsAssignHelper{get pending(){return Promise.all(this._pendings)}constructor(e,t){this._parser=e,this._materialParams=t,this._pendings=[]}assignPrimitive(e,t){null!=t&&(this._materialParams[e]=t)}assignColor(e,t,i){null!=t&&(this._materialParams[e]=new n.Ilk().fromArray(t),i&&this._materialParams[e].convertSRGBToLinear())}assignTexture(e,t,i){return __awaiter$4(this,void 0,void 0,function*(){let r=__awaiter$4(this,void 0,void 0,function*(){if(null!=t&&(yield this._parser.assignTexture(this._materialParams,e,t),i)){var r,o;r=this._materialParams[e],o="srgb",parseInt(n.UZH,10)>=152?r.colorSpace=o:r.encoding=Q[o]}});return this._pendings.push(r),r})}assignTextureByIndex(e,t,i){return __awaiter$4(this,void 0,void 0,function*(){return this.assignTexture(e,null!=t?{index:t}:void 0,i)})}};let Z=new Set(["1.0","1.0-beta"]);let MToonMaterialLoaderPlugin=class MToonMaterialLoaderPlugin{get name(){return MToonMaterialLoaderPlugin.EXTENSION_NAME}constructor(e,t={}){var i,n,r;this.parser=e,this.renderOrderOffset=null!==(i=t.renderOrderOffset)&&void 0!==i?i:0,this.v0CompatShade=null!==(n=t.v0CompatShade)&&void 0!==n&&n,this.debugMode=null!==(r=t.debugMode)&&void 0!==r?r:"none",this._mToonMaterialSet=new Set}beforeRoot(){return __awaiter$4(this,void 0,void 0,function*(){this._removeUnlitExtensionIfMToonExists()})}afterRoot(e){return __awaiter$4(this,void 0,void 0,function*(){e.userData.vrmMToonMaterials=Array.from(this._mToonMaterialSet)})}getMaterialType(e){let t=this._getMToonExtension(e);return t?MToonMaterial:null}extendMaterialParams(e,t){let i=this._getMToonExtension(e);return i?this._extendMaterialParams(i,t):null}loadMesh(e){var t;return __awaiter$4(this,void 0,void 0,function*(){let i=this.parser,n=i.json,r=null===(t=n.meshes)||void 0===t?void 0:t[e];if(null==r)throw Error(`MToonMaterialLoaderPlugin: Attempt to use meshes[${e}] of glTF but the mesh doesn't exist`);let o=r.primitives,a=yield i.loadMesh(e);if(1===o.length){let e=o[0].material;null!=e&&this._setupPrimitive(a,e)}else for(let e=0;e<o.length;e++){let t=a.children[e],i=o[e].material;null!=i&&this._setupPrimitive(t,i)}return a})}_removeUnlitExtensionIfMToonExists(){let e=this.parser,t=e.json,i=t.materials;null==i||i.map((e,t)=>{var i;let n=this._getMToonExtension(t);n&&(null===(i=e.extensions)||void 0===i?void 0:i.KHR_materials_unlit)&&delete e.extensions.KHR_materials_unlit})}_getMToonExtension(e){var t,i;let n=this.parser,r=n.json,o=null===(t=r.materials)||void 0===t?void 0:t[e];if(null==o){console.warn(`MToonMaterialLoaderPlugin: Attempt to use materials[${e}] of glTF but the material doesn't exist`);return}let a=null===(i=o.extensions)||void 0===i?void 0:i[MToonMaterialLoaderPlugin.EXTENSION_NAME];if(null==a)return;let s=a.specVersion;if(!Z.has(s)){console.warn(`MToonMaterialLoaderPlugin: Unknown ${MToonMaterialLoaderPlugin.EXTENSION_NAME} specVersion "${s}"`);return}return a}_extendMaterialParams(e,t){var i;return __awaiter$4(this,void 0,void 0,function*(){delete t.metalness,delete t.roughness;let n=new GLTFMToonMaterialParamsAssignHelper(this.parser,t);n.assignPrimitive("transparentWithZWrite",e.transparentWithZWrite),n.assignColor("shadeColorFactor",e.shadeColorFactor),n.assignTexture("shadeMultiplyTexture",e.shadeMultiplyTexture,!0),n.assignPrimitive("shadingShiftFactor",e.shadingShiftFactor),n.assignTexture("shadingShiftTexture",e.shadingShiftTexture,!0),n.assignPrimitive("shadingShiftTextureScale",null===(i=e.shadingShiftTexture)||void 0===i?void 0:i.scale),n.assignPrimitive("shadingToonyFactor",e.shadingToonyFactor),n.assignPrimitive("giEqualizationFactor",e.giEqualizationFactor),n.assignColor("matcapFactor",e.matcapFactor),n.assignTexture("matcapTexture",e.matcapTexture,!0),n.assignColor("parametricRimColorFactor",e.parametricRimColorFactor),n.assignTexture("rimMultiplyTexture",e.rimMultiplyTexture,!0),n.assignPrimitive("rimLightingMixFactor",e.rimLightingMixFactor),n.assignPrimitive("parametricRimFresnelPowerFactor",e.parametricRimFresnelPowerFactor),n.assignPrimitive("parametricRimLiftFactor",e.parametricRimLiftFactor),n.assignPrimitive("outlineWidthMode",e.outlineWidthMode),n.assignPrimitive("outlineWidthFactor",e.outlineWidthFactor),n.assignTexture("outlineWidthMultiplyTexture",e.outlineWidthMultiplyTexture,!1),n.assignColor("outlineColorFactor",e.outlineColorFactor),n.assignPrimitive("outlineLightingMixFactor",e.outlineLightingMixFactor),n.assignTexture("uvAnimationMaskTexture",e.uvAnimationMaskTexture,!1),n.assignPrimitive("uvAnimationScrollXSpeedFactor",e.uvAnimationScrollXSpeedFactor),n.assignPrimitive("uvAnimationScrollYSpeedFactor",e.uvAnimationScrollYSpeedFactor),n.assignPrimitive("uvAnimationRotationSpeedFactor",e.uvAnimationRotationSpeedFactor),n.assignPrimitive("v0CompatShade",this.v0CompatShade),n.assignPrimitive("debugMode",this.debugMode),yield n.pending})}_setupPrimitive(e,t){let i=this._getMToonExtension(t);if(i){let t=this._parseRenderOrder(i);e.renderOrder=t+this.renderOrderOffset,this._generateOutline(e),this._addToMaterialSet(e);return}}_generateOutline(e){let t=e.material;if(!(t instanceof MToonMaterial)||"none"===t.outlineWidthMode||t.outlineWidthFactor<=0)return;e.material=[t];let i=t.clone();i.name+=" (Outline)",i.isOutline=!0,i.side=n._Li,e.material.push(i);let r=e.geometry,o=r.index?r.index.count:r.attributes.position.count/3;r.addGroup(0,o,0),r.addGroup(0,o,1)}_addToMaterialSet(e){let t=e.material,i=new Set;for(let e of(Array.isArray(t)?t.forEach(e=>i.add(e)):i.add(t),i))e instanceof MToonMaterial&&this._mToonMaterialSet.add(e)}_parseRenderOrder(e){var t;let i=e.transparentWithZWrite;return(i?0:19)+(null!==(t=e.renderQueueOffsetNumber)&&void 0!==t?t:0)}};MToonMaterialLoaderPlugin.EXTENSION_NAME="VRMC_materials_mtoon","function"==typeof SuppressedError&&SuppressedError;let VRMMaterialsHDREmissiveMultiplierLoaderPlugin=class VRMMaterialsHDREmissiveMultiplierLoaderPlugin{get name(){return VRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME}constructor(e){this.parser=e}extendMaterialParams(e,t){var i,n,r,o;return i=this,n=void 0,r=void 0,o=function*(){let i=this._getHDREmissiveMultiplierExtension(e);if(null==i)return;console.warn("VRMMaterialsHDREmissiveMultiplierLoaderPlugin: `VRMC_materials_hdr_emissiveMultiplier` is archived. Use `KHR_materials_emissive_strength` instead.");let n=i.emissiveMultiplier;t.emissiveIntensity=n},new(r||(r=Promise))(function(e,t){function fulfilled(e){try{step(o.next(e))}catch(e){t(e)}}function rejected(e){try{step(o.throw(e))}catch(e){t(e)}}function step(t){var i;t.done?e(t.value):((i=t.value)instanceof r?i:new r(function(e){e(i)})).then(fulfilled,rejected)}step((o=o.apply(i,n||[])).next())})}_getHDREmissiveMultiplierExtension(e){var t,i;let n=this.parser,r=n.json,o=null===(t=r.materials)||void 0===t?void 0:t[e];if(null==o){console.warn(`VRMMaterialsHDREmissiveMultiplierLoaderPlugin: Attempt to use materials[${e}] of glTF but the material doesn't exist`);return}let a=null===(i=o.extensions)||void 0===i?void 0:i[VRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME];if(null!=a)return a}};function gammaEOTF(e){return Math.pow(e,2.2)}VRMMaterialsHDREmissiveMultiplierLoaderPlugin.EXTENSION_NAME="VRMC_materials_hdr_emissiveMultiplier","function"==typeof SuppressedError&&SuppressedError;let VRMMaterialsV0CompatPlugin=class VRMMaterialsV0CompatPlugin{get name(){return"VRMMaterialsV0CompatPlugin"}constructor(e){var t;this.parser=e,this._renderQueueMapTransparent=new Map,this._renderQueueMapTransparentZWrite=new Map;let i=this.parser.json;i.extensionsUsed=null!==(t=i.extensionsUsed)&&void 0!==t?t:[],-1===i.extensionsUsed.indexOf("KHR_texture_transform")&&i.extensionsUsed.push("KHR_texture_transform")}beforeRoot(){var e,t,i,n,r;return t=this,i=void 0,n=void 0,r=function*(){let t=this.parser.json,i=null===(e=t.extensions)||void 0===e?void 0:e.VRM,n=null==i?void 0:i.materialProperties;n&&(this._populateRenderQueueMap(n),n.forEach((e,i)=>{var n,r;let o=null===(n=t.materials)||void 0===n?void 0:n[i];if(null==o){console.warn(`VRMMaterialsV0CompatPlugin: Attempt to use materials[${i}] of glTF but the material doesn't exist`);return}if("VRM/MToon"===e.shader){let n=this._parseV0MToonProperties(e,o);t.materials[i]=n}else if(null===(r=e.shader)||void 0===r?void 0:r.startsWith("VRM/Unlit")){let n=this._parseV0UnlitProperties(e,o);t.materials[i]=n}else"VRM_USE_GLTFSHADER"===e.shader||console.warn(`VRMMaterialsV0CompatPlugin: Unknown shader: ${e.shader}`)}))},new(n||(n=Promise))(function(e,o){function fulfilled(e){try{step(r.next(e))}catch(e){o(e)}}function rejected(e){try{step(r.throw(e))}catch(e){o(e)}}function step(t){var i;t.done?e(t.value):((i=t.value)instanceof n?i:new n(function(e){e(i)})).then(fulfilled,rejected)}step((r=r.apply(t,i||[])).next())})}_parseV0MToonProperties(e,t){var i,r,o,a,s,l,u,d,h,p,c,m,f,g,v,_,M,x,R,y,T,E,P,w,S,A,L,V,C,I,U,N,O,b,F,D,H,B,k,W,z,G,j,$,X,Y,q,Q,Z,J,K,ee,et,ei,en;let er=null!==(r=null===(i=e.keywordMap)||void 0===i?void 0:i._ALPHABLEND_ON)&&void 0!==r&&r,eo=(null===(o=e.floatProperties)||void 0===o?void 0:o._ZWrite)===1,ea=this._v0ParseRenderQueue(e),es=null!==(s=null===(a=e.keywordMap)||void 0===a?void 0:a._ALPHATEST_ON)&&void 0!==s&&s,el=es?null!==(u=null===(l=e.floatProperties)||void 0===l?void 0:l._Cutoff)&&void 0!==u?u:.5:void 0,eu=null!==(h=null===(d=e.floatProperties)||void 0===d?void 0:d._CullMode)&&void 0!==h?h:2,ed=this._portTextureTransform(e),eh=(null!==(c=null===(p=e.vectorProperties)||void 0===p?void 0:p._Color)&&void 0!==c?c:[1,1,1,1]).map((e,t)=>3===t?e:gammaEOTF(e)),ep=null===(m=e.textureProperties)||void 0===m?void 0:m._MainTex,ec=null!=ep?{index:ep,extensions:Object.assign({},ed)}:void 0,em=null!==(g=null===(f=e.floatProperties)||void 0===f?void 0:f._BumpScale)&&void 0!==g?g:1,ef=null===(v=e.textureProperties)||void 0===v?void 0:v._BumpMap,eg=null!=ef?{index:ef,scale:em,extensions:Object.assign({},ed)}:void 0,ev=(null!==(M=null===(_=e.vectorProperties)||void 0===_?void 0:_._EmissionColor)&&void 0!==M?M:[0,0,0,1]).map(gammaEOTF),e_=null===(x=e.textureProperties)||void 0===x?void 0:x._EmissionMap,eM=null!=e_?{index:e_,extensions:Object.assign({},ed)}:void 0,ex=(null!==(y=null===(R=e.vectorProperties)||void 0===R?void 0:R._ShadeColor)&&void 0!==y?y:[.97,.81,.86,1]).map(gammaEOTF),eR=null===(T=e.textureProperties)||void 0===T?void 0:T._ShadeTexture,ey=null!=eR?{index:eR,extensions:Object.assign({},ed)}:void 0,eT=null!==(P=null===(E=e.floatProperties)||void 0===E?void 0:E._ShadeShift)&&void 0!==P?P:0,eE=null!==(S=null===(w=e.floatProperties)||void 0===w?void 0:w._ShadeToony)&&void 0!==S?S:.9;eE=n.M8C.lerp(eE,1,.5+.5*eT),eT=-eT-(1-eE);let eP=null!==(L=null===(A=e.floatProperties)||void 0===A?void 0:A._IndirectLightIntensity)&&void 0!==L?L:.1,ew=null===(V=e.textureProperties)||void 0===V?void 0:V._SphereAdd,eS=null!==(I=null===(C=e.floatProperties)||void 0===C?void 0:C._RimLightingMix)&&void 0!==I?I:0,eA=null===(U=e.textureProperties)||void 0===U?void 0:U._RimTexture,eL=null!=eA?{index:eA,extensions:Object.assign({},ed)}:void 0,eV=(null!==(O=null===(N=e.vectorProperties)||void 0===N?void 0:N._RimColor)&&void 0!==O?O:[0,0,0,1]).map(gammaEOTF),eC=null!==(F=null===(b=e.floatProperties)||void 0===b?void 0:b._RimFresnelPower)&&void 0!==F?F:1,eI=null!==(H=null===(D=e.floatProperties)||void 0===D?void 0:D._RimLift)&&void 0!==H?H:0,eU=["none","worldCoordinates","screenCoordinates"][null!==(k=null===(B=e.floatProperties)||void 0===B?void 0:B._OutlineWidthMode)&&void 0!==k?k:0],eN=null!==(z=null===(W=e.floatProperties)||void 0===W?void 0:W._OutlineWidth)&&void 0!==z?z:0;eN*=.01;let eO=null===(G=e.textureProperties)||void 0===G?void 0:G._OutlineWidthTexture,eb=null!=eO?{index:eO,extensions:Object.assign({},ed)}:void 0,eF=(null!==($=null===(j=e.vectorProperties)||void 0===j?void 0:j._OutlineColor)&&void 0!==$?$:[0,0,0]).map(gammaEOTF),eD=null!==(Y=null===(X=e.floatProperties)||void 0===X?void 0:X._OutlineColorMode)&&void 0!==Y?Y:0,eH=1===eD?null!==(Q=null===(q=e.floatProperties)||void 0===q?void 0:q._OutlineLightingMix)&&void 0!==Q?Q:1:0,eB=null===(Z=e.textureProperties)||void 0===Z?void 0:Z._UvAnimMaskTexture,ek=null!=eB?{index:eB,extensions:Object.assign({},ed)}:void 0,eW=null!==(K=null===(J=e.floatProperties)||void 0===J?void 0:J._UvAnimScrollX)&&void 0!==K?K:0,ez=null!==(et=null===(ee=e.floatProperties)||void 0===ee?void 0:ee._UvAnimScrollY)&&void 0!==et?et:0;null!=ez&&(ez=-ez);let eG=null!==(en=null===(ei=e.floatProperties)||void 0===ei?void 0:ei._UvAnimRotation)&&void 0!==en?en:0,ej={specVersion:"1.0",transparentWithZWrite:eo&&er,renderQueueOffsetNumber:ea,shadeColorFactor:ex,shadeMultiplyTexture:ey,shadingShiftFactor:eT,shadingToonyFactor:eE,giEqualizationFactor:eP?1-eP:void 0,matcapFactor:null!=ew?[1,1,1]:void 0,matcapTexture:null!=ew?{index:ew}:void 0,rimLightingMixFactor:eS,rimMultiplyTexture:eL,parametricRimColorFactor:eV,parametricRimFresnelPowerFactor:eC,parametricRimLiftFactor:eI,outlineWidthMode:eU,outlineWidthFactor:eN,outlineWidthMultiplyTexture:eb,outlineColorFactor:eF,outlineLightingMixFactor:eH,uvAnimationMaskTexture:ek,uvAnimationScrollXSpeedFactor:eW,uvAnimationScrollYSpeedFactor:ez,uvAnimationRotationSpeedFactor:eG};return Object.assign(Object.assign({},t),{pbrMetallicRoughness:{baseColorFactor:eh,baseColorTexture:ec},normalTexture:eg,emissiveTexture:eM,emissiveFactor:ev,alphaMode:er?"BLEND":es?"MASK":"OPAQUE",alphaCutoff:el,doubleSided:0===eu,extensions:{VRMC_materials_mtoon:ej}})}_parseV0UnlitProperties(e,t){var i,n,r,o,a;let s="VRM/UnlitTransparentZWrite"===e.shader,l="VRM/UnlitTransparent"===e.shader||s,u=this._v0ParseRenderQueue(e),d="VRM/UnlitCutout"===e.shader,h=d?null!==(n=null===(i=e.floatProperties)||void 0===i?void 0:i._Cutoff)&&void 0!==n?n:.5:void 0,p=this._portTextureTransform(e),c=(null!==(o=null===(r=e.vectorProperties)||void 0===r?void 0:r._Color)&&void 0!==o?o:[1,1,1,1]).map(gammaEOTF),m=null===(a=e.textureProperties)||void 0===a?void 0:a._MainTex,f=null!=m?{index:m,extensions:Object.assign({},p)}:void 0;return Object.assign(Object.assign({},t),{pbrMetallicRoughness:{baseColorFactor:c,baseColorTexture:f},alphaMode:l?"BLEND":d?"MASK":"OPAQUE",alphaCutoff:h,extensions:{VRMC_materials_mtoon:{specVersion:"1.0",transparentWithZWrite:s,renderQueueOffsetNumber:u,shadeColorFactor:c,shadeMultiplyTexture:f}}})}_portTextureTransform(e){var t,i,n,r,o;let a=null===(t=e.vectorProperties)||void 0===t?void 0:t._MainTex;if(null==a)return{};let s=[null!==(i=null==a?void 0:a[0])&&void 0!==i?i:0,null!==(n=null==a?void 0:a[1])&&void 0!==n?n:0],l=[null!==(r=null==a?void 0:a[2])&&void 0!==r?r:1,null!==(o=null==a?void 0:a[3])&&void 0!==o?o:1];return s[1]=1-l[1]-s[1],{KHR_texture_transform:{offset:s,scale:l}}}_v0ParseRenderQueue(e){var t,i,n;let r=null!==(i=null===(t=e.keywordMap)||void 0===t?void 0:t._ALPHABLEND_ON)&&void 0!==i&&i,o=(null===(n=e.floatProperties)||void 0===n?void 0:n._ZWrite)===1,a=0;if(r){let t=e.renderQueue;null!=t&&(a=o?this._renderQueueMapTransparentZWrite.get(t):this._renderQueueMapTransparent.get(t))}return a}_populateRenderQueueMap(e){let t=new Set,i=new Set;e.forEach(e=>{var n,r,o;let a=null!==(r=null===(n=e.keywordMap)||void 0===n?void 0:n._ALPHABLEND_ON)&&void 0!==r&&r,s=(null===(o=e.floatProperties)||void 0===o?void 0:o._ZWrite)===1;if(a){let n=e.renderQueue;null!=n&&(s?i.add(n):t.add(n))}}),t.size>10&&console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${t.size} render queues for Transparent materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`),i.size>10&&console.warn(`VRMMaterialsV0CompatPlugin: This VRM uses ${i.size} render queues for TransparentZWrite materials while VRM 1.0 only supports up to 10 render queues. The model might not be rendered correctly.`),Array.from(t).sort().forEach((e,i)=>{let n=Math.min(Math.max(i-t.size+1,-9),0);this._renderQueueMapTransparent.set(e,n)}),Array.from(i).sort().forEach((e,t)=>{let i=Math.min(Math.max(t,0),9);this._renderQueueMapTransparentZWrite.set(e,i)})}};/*!
 * @pixiv/three-vrm-node-constraint v2.1.2
 * Node constraint module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2024 pixiv Inc.
 * @pixiv/three-vrm-node-constraint is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */let J=new n.Pa4;let VRMNodeConstraintHelper=class VRMNodeConstraintHelper extends n.ZAu{constructor(e){super(),this._attrPosition=new n.TlE(new Float32Array([0,0,0,0,0,0]),3),this._attrPosition.setUsage(n.dj0);let t=new n.u9r;t.setAttribute("position",this._attrPosition);let i=new n.nls({color:16711935,depthTest:!1,depthWrite:!1});this._line=new n.x12(t,i),this.add(this._line),this.constraint=e}updateMatrixWorld(e){J.setFromMatrixPosition(this.constraint.destination.matrixWorld),this._attrPosition.setXYZ(0,J.x,J.y,J.z),this.constraint.source&&J.setFromMatrixPosition(this.constraint.source.matrixWorld),this._attrPosition.setXYZ(1,J.x,J.y,J.z),this._attrPosition.needsUpdate=!0,super.updateMatrixWorld(e)}};function decomposePosition(e,t){return t.set(e.elements[12],e.elements[13],e.elements[14])}let K=new n.Pa4,ee=new n.Pa4;function quatInvertCompat(e){return e.invert?e.invert():e.inverse(),e}let VRMNodeConstraint=class VRMNodeConstraint{constructor(e,t){this.destination=e,this.source=t,this.weight=1}};let et=new n.Pa4,ei=new n.Pa4,en=new n.Pa4,er=new n._fP,eo=new n._fP,ea=new n._fP;let VRMAimConstraint=class VRMAimConstraint extends VRMNodeConstraint{get aimAxis(){return this._aimAxis}set aimAxis(e){this._aimAxis=e,this._v3AimAxis.set("PositiveX"===e?1:"NegativeX"===e?-1:0,"PositiveY"===e?1:"NegativeY"===e?-1:0,"PositiveZ"===e?1:"NegativeZ"===e?-1:0)}get dependencies(){let e=new Set([this.source]);return this.destination.parent&&e.add(this.destination.parent),e}constructor(e,t){super(e,t),this._aimAxis="PositiveX",this._v3AimAxis=new n.Pa4(1,0,0),this._dstRestQuat=new n._fP}setInitState(){this._dstRestQuat.copy(this.destination.quaternion)}update(){this.destination.updateWorldMatrix(!0,!1),this.source.updateWorldMatrix(!0,!1);let e=er.identity(),t=eo.identity();this.destination.parent&&(this.destination.parent.matrixWorld.decompose(K,e,ee),quatInvertCompat(t.copy(e)));let i=et.copy(this._v3AimAxis).applyQuaternion(this._dstRestQuat).applyQuaternion(e),n=decomposePosition(this.source.matrixWorld,ei).sub(decomposePosition(this.destination.matrixWorld,en)).normalize(),r=ea.setFromUnitVectors(i,n).premultiply(t).multiply(e).multiply(this._dstRestQuat);this.destination.quaternion.copy(this._dstRestQuat).slerp(r,this.weight)}};function __awaiter$1(e,t,i,n){return new(i||(i=Promise))(function(r,o){function fulfilled(e){try{step(n.next(e))}catch(e){o(e)}}function rejected(e){try{step(n.throw(e))}catch(e){o(e)}}function step(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(fulfilled,rejected)}step((n=n.apply(e,t||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;let VRMNodeConstraintManager=class VRMNodeConstraintManager{constructor(){this._constraints=new Set,this._objectConstraintsMap=new Map}get constraints(){return this._constraints}addConstraint(e){this._constraints.add(e);let t=this._objectConstraintsMap.get(e.destination);null==t&&(t=new Set,this._objectConstraintsMap.set(e.destination,t)),t.add(e)}deleteConstraint(e){this._constraints.delete(e);let t=this._objectConstraintsMap.get(e.destination);t.delete(e)}setInitState(){let e=new Set,t=new Set;for(let i of this._constraints)this._processConstraint(i,e,t,e=>e.setInitState())}update(){let e=new Set,t=new Set;for(let i of this._constraints)this._processConstraint(i,e,t,e=>e.update())}_processConstraint(e,t,i,n){if(i.has(e))return;if(t.has(e))throw Error("VRMNodeConstraintManager: Circular dependency detected while updating constraints");t.add(e);let r=e.dependencies;for(let e of r)!function(e,t){let i=[e],n=e.parent;for(;null!==n;)i.unshift(n),n=n.parent;i.forEach(e=>{t(e)})}(e,e=>{let r=this._objectConstraintsMap.get(e);if(r)for(let e of r)this._processConstraint(e,t,i,n)});n(e),i.add(e)}};let es=new n._fP,el=new n._fP;let VRMRotationConstraint=class VRMRotationConstraint extends VRMNodeConstraint{get dependencies(){return new Set([this.source])}constructor(e,t){super(e,t),this._dstRestQuat=new n._fP,this._invSrcRestQuat=new n._fP}setInitState(){this._dstRestQuat.copy(this.destination.quaternion),quatInvertCompat(this._invSrcRestQuat.copy(this.source.quaternion))}update(){let e=es.copy(this._invSrcRestQuat).multiply(this.source.quaternion),t=el.copy(this._dstRestQuat).multiply(e);this.destination.quaternion.copy(this._dstRestQuat).slerp(t,this.weight)}};let eu=new n.Pa4,ed=new n._fP,eh=new n._fP;let VRMRollConstraint=class VRMRollConstraint extends VRMNodeConstraint{get rollAxis(){return this._rollAxis}set rollAxis(e){this._rollAxis=e,this._v3RollAxis.set("X"===e?1:0,"Y"===e?1:0,"Z"===e?1:0)}get dependencies(){return new Set([this.source])}constructor(e,t){super(e,t),this._rollAxis="X",this._v3RollAxis=new n.Pa4(1,0,0),this._dstRestQuat=new n._fP,this._invDstRestQuat=new n._fP,this._invSrcRestQuatMulDstRestQuat=new n._fP}setInitState(){this._dstRestQuat.copy(this.destination.quaternion),quatInvertCompat(this._invDstRestQuat.copy(this._dstRestQuat)),quatInvertCompat(this._invSrcRestQuatMulDstRestQuat.copy(this.source.quaternion)).multiply(this._dstRestQuat)}update(){let e=ed.copy(this._invDstRestQuat).multiply(this.source.quaternion).multiply(this._invSrcRestQuatMulDstRestQuat),t=eu.copy(this._v3RollAxis).applyQuaternion(e),i=eh.setFromUnitVectors(t,this._v3RollAxis),n=i.premultiply(this._dstRestQuat).multiply(e);this.destination.quaternion.copy(this._dstRestQuat).slerp(n,this.weight)}};let ep=new Set(["1.0","1.0-beta"]);let VRMNodeConstraintLoaderPlugin=class VRMNodeConstraintLoaderPlugin{get name(){return VRMNodeConstraintLoaderPlugin.EXTENSION_NAME}constructor(e,t){this.parser=e,this.helperRoot=null==t?void 0:t.helperRoot}afterRoot(e){return __awaiter$1(this,void 0,void 0,function*(){e.userData.vrmNodeConstraintManager=yield this._import(e)})}_import(e){var t;return __awaiter$1(this,void 0,void 0,function*(){let i=this.parser.json,n=(null===(t=i.extensionsUsed)||void 0===t?void 0:t.indexOf(VRMNodeConstraintLoaderPlugin.EXTENSION_NAME))!==-1;if(!n)return null;let r=new VRMNodeConstraintManager,o=yield this.parser.getDependencies("node");return o.forEach((e,t)=>{var n;let a=i.nodes[t],s=null===(n=null==a?void 0:a.extensions)||void 0===n?void 0:n[VRMNodeConstraintLoaderPlugin.EXTENSION_NAME];if(null==s)return;let l=s.specVersion;if(!ep.has(l)){console.warn(`VRMNodeConstraintLoaderPlugin: Unknown ${VRMNodeConstraintLoaderPlugin.EXTENSION_NAME} specVersion "${l}"`);return}let u=s.constraint;if(null!=u.roll){let t=this._importRollConstraint(e,o,u.roll);r.addConstraint(t)}else if(null!=u.aim){let t=this._importAimConstraint(e,o,u.aim);r.addConstraint(t)}else if(null!=u.rotation){let t=this._importRotationConstraint(e,o,u.rotation);r.addConstraint(t)}}),e.scene.updateMatrixWorld(),r.setInitState(),r})}_importRollConstraint(e,t,i){let{source:n,rollAxis:r,weight:o}=i,a=t[n],s=new VRMRollConstraint(e,a);if(null!=r&&(s.rollAxis=r),null!=o&&(s.weight=o),this.helperRoot){let e=new VRMNodeConstraintHelper(s);this.helperRoot.add(e)}return s}_importAimConstraint(e,t,i){let{source:n,aimAxis:r,weight:o}=i,a=t[n],s=new VRMAimConstraint(e,a);if(null!=r&&(s.aimAxis=r),null!=o&&(s.weight=o),this.helperRoot){let e=new VRMNodeConstraintHelper(s);this.helperRoot.add(e)}return s}_importRotationConstraint(e,t,i){let{source:n,weight:r}=i,o=t[n],a=new VRMRotationConstraint(e,o);if(null!=r&&(a.weight=r),this.helperRoot){let e=new VRMNodeConstraintHelper(a);this.helperRoot.add(e)}return a}};VRMNodeConstraintLoaderPlugin.EXTENSION_NAME="VRMC_node_constraint";/*!
 * @pixiv/three-vrm-springbone v2.1.2
 * Spring bone module for @pixiv/three-vrm
 *
 * Copyright (c) 2020-2024 pixiv Inc.
 * @pixiv/three-vrm-springbone is distributed under MIT License
 * https://github.com/pixiv/three-vrm/blob/release/LICENSE
 */let VRMSpringBoneColliderShape=class VRMSpringBoneColliderShape{};let ec=new n.Pa4,em=new n.Pa4;let VRMSpringBoneColliderShapeCapsule=class VRMSpringBoneColliderShapeCapsule extends VRMSpringBoneColliderShape{get type(){return"capsule"}constructor(e){var t,i,r;super(),this.offset=null!==(t=null==e?void 0:e.offset)&&void 0!==t?t:new n.Pa4(0,0,0),this.tail=null!==(i=null==e?void 0:e.tail)&&void 0!==i?i:new n.Pa4(0,0,0),this.radius=null!==(r=null==e?void 0:e.radius)&&void 0!==r?r:0}calculateCollision(e,t,i,n){ec.copy(this.offset).applyMatrix4(e),em.copy(this.tail).applyMatrix4(e),em.sub(ec);let r=em.lengthSq();n.copy(t).sub(ec);let o=em.dot(n);o<=0||(r<=o||em.multiplyScalar(o/r),n.sub(em));let a=i+this.radius,s=n.length()-a;return n.normalize(),s}};let VRMSpringBoneColliderShapeSphere=class VRMSpringBoneColliderShapeSphere extends VRMSpringBoneColliderShape{get type(){return"sphere"}constructor(e){var t,i;super(),this.offset=null!==(t=null==e?void 0:e.offset)&&void 0!==t?t:new n.Pa4(0,0,0),this.radius=null!==(i=null==e?void 0:e.radius)&&void 0!==i?i:0}calculateCollision(e,t,i,n){n.copy(this.offset).applyMatrix4(e),n.negate().add(t);let r=i+this.radius,o=n.length()-r;return n.normalize(),o}};let ef=new n.Pa4;let ColliderShapeCapsuleBufferGeometry=class ColliderShapeCapsuleBufferGeometry extends n.u9r{constructor(e){super(),this.worldScale=1,this._currentRadius=0,this._currentOffset=new n.Pa4,this._currentTail=new n.Pa4,this._shape=e,this._attrPos=new n.TlE(new Float32Array(396),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.TlE(new Uint16Array(264),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1,t=this._shape.radius/this.worldScale;this._currentRadius!==t&&(this._currentRadius=t,e=!0),this._currentOffset.equals(this._shape.offset)||(this._currentOffset.copy(this._shape.offset),e=!0);let i=ef.copy(this._shape.tail).divideScalar(this.worldScale);this._currentTail.distanceToSquared(i)>1e-10&&(this._currentTail.copy(i),e=!0),e&&this._buildPosition()}_buildPosition(){ef.copy(this._currentTail).sub(this._currentOffset);let e=ef.length()/this._currentRadius;for(let t=0;t<=16;t++){let i=t/16*Math.PI;this._attrPos.setXYZ(t,-Math.sin(i),-Math.cos(i),0),this._attrPos.setXYZ(17+t,e+Math.sin(i),Math.cos(i),0),this._attrPos.setXYZ(34+t,-Math.sin(i),0,-Math.cos(i)),this._attrPos.setXYZ(51+t,e+Math.sin(i),0,Math.cos(i))}for(let t=0;t<32;t++){let i=t/16*Math.PI;this._attrPos.setXYZ(68+t,0,Math.sin(i),Math.cos(i)),this._attrPos.setXYZ(100+t,e,Math.sin(i),Math.cos(i))}let t=Math.atan2(ef.y,Math.sqrt(ef.x*ef.x+ef.z*ef.z)),i=-Math.atan2(ef.z,ef.x);this.rotateZ(t),this.rotateY(i),this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentOffset.x,this._currentOffset.y,this._currentOffset.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<34;e++){let t=(e+1)%34;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(68+2*e,34+e,34+t)}for(let e=0;e<32;e++){let t=(e+1)%32;this._attrIndex.setXY(136+2*e,68+e,68+t),this._attrIndex.setXY(200+2*e,100+e,100+t)}this._attrIndex.needsUpdate=!0}};let ColliderShapeSphereBufferGeometry=class ColliderShapeSphereBufferGeometry extends n.u9r{constructor(e){super(),this.worldScale=1,this._currentRadius=0,this._currentOffset=new n.Pa4,this._shape=e,this._attrPos=new n.TlE(new Float32Array(288),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.TlE(new Uint16Array(192),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1,t=this._shape.radius/this.worldScale;this._currentRadius!==t&&(this._currentRadius=t,e=!0),this._currentOffset.equals(this._shape.offset)||(this._currentOffset.copy(this._shape.offset),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){let t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentOffset.x,this._currentOffset.y,this._currentOffset.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){let t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.needsUpdate=!0}};let eg=new n.Pa4;let VRMSpringBoneColliderHelper=class VRMSpringBoneColliderHelper extends n.ZAu{constructor(e){if(super(),this.matrixAutoUpdate=!1,this.collider=e,this.collider.shape instanceof VRMSpringBoneColliderShapeSphere)this._geometry=new ColliderShapeSphereBufferGeometry(this.collider.shape);else if(this.collider.shape instanceof VRMSpringBoneColliderShapeCapsule)this._geometry=new ColliderShapeCapsuleBufferGeometry(this.collider.shape);else throw Error("VRMSpringBoneColliderHelper: Unknown collider shape type detected");let t=new n.nls({color:16711935,depthTest:!1,depthWrite:!1});this._line=new n.ejS(this._geometry,t),this.add(this._line)}dispose(){this._geometry.dispose()}updateMatrixWorld(e){this.collider.updateWorldMatrix(!0,!1),this.matrix.copy(this.collider.matrixWorld);let t=this.matrix.elements;this._geometry.worldScale=eg.set(t[0],t[1],t[2]).length(),this._geometry.update(),super.updateMatrixWorld(e)}};let SpringBoneBufferGeometry=class SpringBoneBufferGeometry extends n.u9r{constructor(e){super(),this.worldScale=1,this._currentRadius=0,this._currentTail=new n.Pa4,this._springBone=e,this._attrPos=new n.TlE(new Float32Array(294),3),this.setAttribute("position",this._attrPos),this._attrIndex=new n.TlE(new Uint16Array(194),1),this.setIndex(this._attrIndex),this._buildIndex(),this.update()}update(){let e=!1,t=this._springBone.settings.hitRadius/this.worldScale;this._currentRadius!==t&&(this._currentRadius=t,e=!0),this._currentTail.equals(this._springBone.initialLocalChildPosition)||(this._currentTail.copy(this._springBone.initialLocalChildPosition),e=!0),e&&this._buildPosition()}_buildPosition(){for(let e=0;e<32;e++){let t=e/16*Math.PI;this._attrPos.setXYZ(e,Math.cos(t),Math.sin(t),0),this._attrPos.setXYZ(32+e,0,Math.cos(t),Math.sin(t)),this._attrPos.setXYZ(64+e,Math.sin(t),0,Math.cos(t))}this.scale(this._currentRadius,this._currentRadius,this._currentRadius),this.translate(this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.setXYZ(96,0,0,0),this._attrPos.setXYZ(97,this._currentTail.x,this._currentTail.y,this._currentTail.z),this._attrPos.needsUpdate=!0}_buildIndex(){for(let e=0;e<32;e++){let t=(e+1)%32;this._attrIndex.setXY(2*e,e,t),this._attrIndex.setXY(64+2*e,32+e,32+t),this._attrIndex.setXY(128+2*e,64+e,64+t)}this._attrIndex.setXY(192,96,97),this._attrIndex.needsUpdate=!0}};let ev=new n.Pa4;let VRMSpringBoneJointHelper=class VRMSpringBoneJointHelper extends n.ZAu{constructor(e){super(),this.matrixAutoUpdate=!1,this.springBone=e,this._geometry=new SpringBoneBufferGeometry(this.springBone);let t=new n.nls({color:16776960,depthTest:!1,depthWrite:!1});this._line=new n.ejS(this._geometry,t),this.add(this._line)}dispose(){this._geometry.dispose()}updateMatrixWorld(e){this.springBone.bone.updateWorldMatrix(!0,!1),this.matrix.copy(this.springBone.bone.matrixWorld);let t=this.matrix.elements;this._geometry.worldScale=ev.set(t[0],t[1],t[2]).length(),this._geometry.update(),super.updateMatrixWorld(e)}};let VRMSpringBoneCollider=class VRMSpringBoneCollider extends n.Tme{constructor(e){super(),this.shape=e}};let e_=new n.yGw;function mat4InvertCompat(e){return e.invert?e.invert():e.getInverse(e_.copy(e)),e}let Matrix4InverseCache=class Matrix4InverseCache{get inverse(){return this._shouldUpdateInverse&&(this._inverseCache.copy(this.matrix),mat4InvertCompat(this._inverseCache),this._shouldUpdateInverse=!1),this._inverseCache}constructor(e){this._inverseCache=new n.yGw,this._shouldUpdateInverse=!0,this.matrix=e,this._originalElements=e.elements,e.elements=new Proxy(e.elements,{set:(e,t,i)=>(this._shouldUpdateInverse=!0,e[t]=i,!0)})}revert(){this.matrix.elements=this._originalElements}};let eM=new n.yGw,ex=new n.Pa4,eR=new n.Pa4,ey=new n.Pa4,eT=new n.Pa4,eE=new n.Pa4,eP=new n.Pa4,ew=new n._fP,eS=new n.yGw,eA=new n.yGw;let VRMSpringBoneJoint=class VRMSpringBoneJoint{get center(){return this._center}set center(e){var t;(null===(t=this._center)||void 0===t?void 0:t.userData.inverseCacheProxy)&&(this._center.userData.inverseCacheProxy.revert(),delete this._center.userData.inverseCacheProxy),this._center=e,this._center&&!this._center.userData.inverseCacheProxy&&(this._center.userData.inverseCacheProxy=new Matrix4InverseCache(this._center.matrixWorld))}get initialLocalChildPosition(){return this._initialLocalChildPosition}get _parentMatrixWorld(){return this.bone.parent?this.bone.parent.matrixWorld:eM}constructor(e,t,i={},r=[]){var o,a,s,l,u,d;this._currentTail=new n.Pa4,this._prevTail=new n.Pa4,this._boneAxis=new n.Pa4,this._worldSpaceBoneLength=0,this._center=null,this._initialLocalMatrix=new n.yGw,this._initialLocalRotation=new n._fP,this._initialLocalChildPosition=new n.Pa4,this.bone=e,this.bone.matrixAutoUpdate=!1,this.child=t,this.settings={hitRadius:null!==(o=i.hitRadius)&&void 0!==o?o:0,stiffness:null!==(a=i.stiffness)&&void 0!==a?a:1,gravityPower:null!==(s=i.gravityPower)&&void 0!==s?s:0,gravityDir:null!==(u=null===(l=i.gravityDir)||void 0===l?void 0:l.clone())&&void 0!==u?u:new n.Pa4(0,-1,0),dragForce:null!==(d=i.dragForce)&&void 0!==d?d:.4},this.colliderGroups=r}setInitState(){this._initialLocalMatrix.copy(this.bone.matrix),this._initialLocalRotation.copy(this.bone.quaternion),this.child?this._initialLocalChildPosition.copy(this.child.position):this._initialLocalChildPosition.copy(this.bone.position).normalize().multiplyScalar(.07);let e=this._getMatrixWorldToCenter(eS);this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(e),this._prevTail.copy(this._currentTail),this._boneAxis.copy(this._initialLocalChildPosition).normalize()}reset(){this.bone.quaternion.copy(this._initialLocalRotation),this.bone.updateMatrix(),this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld,this.bone.matrix);let e=this._getMatrixWorldToCenter(eS);this.bone.localToWorld(this._currentTail.copy(this._initialLocalChildPosition)).applyMatrix4(e),this._prevTail.copy(this._currentTail)}update(e){if(e<=0)return;this._calcWorldSpaceBoneLength(),eT.setFromMatrixPosition(this.bone.matrixWorld);let t=this._getMatrixWorldToCenter(eS);eE.copy(eT).applyMatrix4(t);let i=ew.setFromRotationMatrix(t),n=eA.copy(t).multiply(this._parentMatrixWorld),r=eR.copy(this._boneAxis).applyMatrix4(this._initialLocalMatrix).applyMatrix4(n).sub(eE).normalize(),o=ey.copy(this.settings.gravityDir).applyQuaternion(i).normalize(),a=this._getMatrixCenterToWorld(eS);eP.copy(this._currentTail).add(ex.copy(this._currentTail).sub(this._prevTail).multiplyScalar(1-this.settings.dragForce)).add(ex.copy(r).multiplyScalar(this.settings.stiffness*e)).add(ex.copy(o).multiplyScalar(this.settings.gravityPower*e)).applyMatrix4(a),eP.sub(eT).normalize().multiplyScalar(this._worldSpaceBoneLength).add(eT),this._collision(eP),t=this._getMatrixWorldToCenter(eS),this._prevTail.copy(this._currentTail),this._currentTail.copy(ex.copy(eP).applyMatrix4(t));let s=mat4InvertCompat(eS.copy(this._parentMatrixWorld).multiply(this._initialLocalMatrix)),l=ew.setFromUnitVectors(this._boneAxis,ex.copy(eP).applyMatrix4(s).normalize());this.bone.quaternion.copy(this._initialLocalRotation).multiply(l),this.bone.updateMatrix(),this.bone.matrixWorld.multiplyMatrices(this._parentMatrixWorld,this.bone.matrix)}_collision(e){this.colliderGroups.forEach(t=>{t.colliders.forEach(t=>{let i=t.shape.calculateCollision(t.matrixWorld,e,this.settings.hitRadius,ex);i<0&&(e.add(ex.multiplyScalar(-i)),e.sub(eT).normalize().multiplyScalar(this._worldSpaceBoneLength).add(eT))})})}_calcWorldSpaceBoneLength(){ex.setFromMatrixPosition(this.bone.matrixWorld),this.child?eR.setFromMatrixPosition(this.child.matrixWorld):(eR.copy(this._initialLocalChildPosition),eR.applyMatrix4(this.bone.matrixWorld)),this._worldSpaceBoneLength=ex.sub(eR).length()}_getMatrixCenterToWorld(e){return this._center?e.copy(this._center.matrixWorld):e.identity(),e}_getMatrixWorldToCenter(e){return this._center?e.copy(this._center.userData.inverseCacheProxy.inverse):e.identity(),e}};function __awaiter(e,t,i,n){return new(i||(i=Promise))(function(r,o){function fulfilled(e){try{step(n.next(e))}catch(e){o(e)}}function rejected(e){try{step(n.throw(e))}catch(e){o(e)}}function step(e){var t;e.done?r(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(fulfilled,rejected)}step((n=n.apply(e,t||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;let VRMSpringBoneManager=class VRMSpringBoneManager{constructor(){this._joints=new Set,this._objectSpringBonesMap=new Map}get joints(){return this._joints}get springBones(){return console.warn("VRMSpringBoneManager: springBones is deprecated. use joints instead."),this._joints}get colliderGroups(){let e=new Set;return this._joints.forEach(t=>{t.colliderGroups.forEach(t=>{e.add(t)})}),Array.from(e)}get colliders(){let e=new Set;return this.colliderGroups.forEach(t=>{t.colliders.forEach(t=>{e.add(t)})}),Array.from(e)}addJoint(e){this._joints.add(e);let t=this._objectSpringBonesMap.get(e.bone);null==t&&(t=new Set,this._objectSpringBonesMap.set(e.bone,t)),t.add(e)}addSpringBone(e){console.warn("VRMSpringBoneManager: addSpringBone() is deprecated. use addJoint() instead."),this.addJoint(e)}deleteJoint(e){this._joints.delete(e);let t=this._objectSpringBonesMap.get(e.bone);t.delete(e)}deleteSpringBone(e){console.warn("VRMSpringBoneManager: deleteSpringBone() is deprecated. use deleteJoint() instead."),this.deleteJoint(e)}setInitState(){let e=new Set,t=new Set,i=new Set;for(let n of this._joints)this._processSpringBone(n,e,t,i,e=>e.setInitState())}reset(){let e=new Set,t=new Set,i=new Set;for(let n of this._joints)this._processSpringBone(n,e,t,i,e=>e.reset())}update(e){let t=new Set,i=new Set,n=new Set;for(let r of this._joints)this._processSpringBone(r,t,i,n,t=>t.update(e)),function traverseChildrenUntilConditionMet(e,t){e.children.forEach(e=>{let i=t(e);i||traverseChildrenUntilConditionMet(e,t)})}(r.bone,e=>{var t,i;return(null!==(i=null===(t=this._objectSpringBonesMap.get(e))||void 0===t?void 0:t.size)&&void 0!==i?i:0)>0||(e.updateWorldMatrix(!1,!1),!1)})}_processSpringBone(e,t,i,n,r){if(i.has(e))return;if(t.has(e))throw Error("VRMSpringBoneManager: Circular dependency detected while updating springbones");t.add(e);let o=this._getDependencies(e);for(let e of o)!function(e,t){let i=[],n=e;for(;null!==n;)i.unshift(n),n=n.parent;i.forEach(e=>{t(e)})}(e,e=>{let o=this._objectSpringBonesMap.get(e);if(o)for(let e of o)this._processSpringBone(e,t,i,n,r);else n.has(e)||(e.updateWorldMatrix(!1,!1),n.add(e))});e.bone.updateMatrix(),e.bone.updateWorldMatrix(!1,!1),r(e),n.add(e.bone),i.add(e)}_getDependencies(e){let t=new Set,i=e.bone.parent;return i&&t.add(i),e.colliderGroups.forEach(e=>{e.colliders.forEach(e=>{t.add(e)})}),t}};let eL=new Set(["1.0","1.0-beta"]);let VRMSpringBoneLoaderPlugin=class VRMSpringBoneLoaderPlugin{get name(){return VRMSpringBoneLoaderPlugin.EXTENSION_NAME}constructor(e,t){this.parser=e,this.jointHelperRoot=null==t?void 0:t.jointHelperRoot,this.colliderHelperRoot=null==t?void 0:t.colliderHelperRoot}afterRoot(e){return __awaiter(this,void 0,void 0,function*(){e.userData.vrmSpringBoneManager=yield this._import(e)})}_import(e){return __awaiter(this,void 0,void 0,function*(){let t=yield this._v1Import(e);if(null!=t)return t;let i=yield this._v0Import(e);return null!=i?i:null})}_v1Import(e){var t,i,r,o,a;return __awaiter(this,void 0,void 0,function*(){let s=e.parser.json,l=(null===(t=s.extensionsUsed)||void 0===t?void 0:t.indexOf(VRMSpringBoneLoaderPlugin.EXTENSION_NAME))!==-1;if(!l)return null;let u=new VRMSpringBoneManager,d=yield e.parser.getDependencies("node"),h=null===(i=s.extensions)||void 0===i?void 0:i[VRMSpringBoneLoaderPlugin.EXTENSION_NAME];if(!h)return null;let p=h.specVersion;if(!eL.has(p))return console.warn(`VRMSpringBoneLoaderPlugin: Unknown ${VRMSpringBoneLoaderPlugin.EXTENSION_NAME} specVersion "${p}"`),null;let c=null===(r=h.colliders)||void 0===r?void 0:r.map((e,t)=>{var i,r,o,a,s;let l=d[e.node],u=e.shape;if(u.sphere)return this._importSphereCollider(l,{offset:new n.Pa4().fromArray(null!==(i=u.sphere.offset)&&void 0!==i?i:[0,0,0]),radius:null!==(r=u.sphere.radius)&&void 0!==r?r:0});if(u.capsule)return this._importCapsuleCollider(l,{offset:new n.Pa4().fromArray(null!==(o=u.capsule.offset)&&void 0!==o?o:[0,0,0]),radius:null!==(a=u.capsule.radius)&&void 0!==a?a:0,tail:new n.Pa4().fromArray(null!==(s=u.capsule.tail)&&void 0!==s?s:[0,0,0])});throw Error(`VRMSpringBoneLoaderPlugin: The collider #${t} has no valid shape`)}),m=null===(o=h.colliderGroups)||void 0===o?void 0:o.map((e,t)=>{var i;let n=(null!==(i=e.colliders)&&void 0!==i?i:[]).map(e=>{let i=null==c?void 0:c[e];if(null==i)throw Error(`VRMSpringBoneLoaderPlugin: The colliderGroup #${t} attempted to use a collider #${e} but not found`);return i});return{colliders:n,name:e.name}});return null===(a=h.springs)||void 0===a||a.forEach((e,t)=>{var i;let r;let o=e.joints,a=null===(i=e.colliderGroups)||void 0===i?void 0:i.map(e=>{let i=null==m?void 0:m[e];if(null==i)throw Error(`VRMSpringBoneLoaderPlugin: The spring #${t} attempted to use a colliderGroup ${e} but not found`);return i}),s=null!=e.center?d[e.center]:void 0;o.forEach(e=>{if(r){let t=r.node,i=d[t],o=e.node,l=d[o],h={hitRadius:r.hitRadius,dragForce:r.dragForce,gravityPower:r.gravityPower,stiffness:r.stiffness,gravityDir:null!=r.gravityDir?new n.Pa4().fromArray(r.gravityDir):void 0},p=this._importJoint(i,l,h,a);s&&(p.center=s),u.addJoint(p)}r=e})}),u.setInitState(),u})}_v0Import(e){var t,i,r;return __awaiter(this,void 0,void 0,function*(){let o=e.parser.json,a=(null===(t=o.extensionsUsed)||void 0===t?void 0:t.indexOf("VRM"))!==-1;if(!a)return null;let s=null===(i=o.extensions)||void 0===i?void 0:i.VRM,l=null==s?void 0:s.secondaryAnimation;if(!l)return null;let u=null==l?void 0:l.boneGroups;if(!u)return null;let d=new VRMSpringBoneManager,h=yield e.parser.getDependencies("node"),p=null===(r=l.colliderGroups)||void 0===r?void 0:r.map(e=>{var t;let i=h[e.node],r=(null!==(t=e.colliders)&&void 0!==t?t:[]).map((e,t)=>{var r,o,a;let s=new n.Pa4(0,0,0);return e.offset&&s.set(null!==(r=e.offset.x)&&void 0!==r?r:0,null!==(o=e.offset.y)&&void 0!==o?o:0,e.offset.z?-e.offset.z:0),this._importSphereCollider(i,{offset:s,radius:null!==(a=e.radius)&&void 0!==a?a:0})});return{colliders:r}});return null==u||u.forEach((e,t)=>{let i=e.bones;i&&i.forEach(i=>{var r,o,a,s;let l=h[i],u=new n.Pa4;e.gravityDir?u.set(null!==(r=e.gravityDir.x)&&void 0!==r?r:0,null!==(o=e.gravityDir.y)&&void 0!==o?o:0,null!==(a=e.gravityDir.z)&&void 0!==a?a:0):u.set(0,-1,0);let c=null!=e.center?h[e.center]:void 0,m={hitRadius:e.hitRadius,dragForce:e.dragForce,gravityPower:e.gravityPower,stiffness:e.stiffiness,gravityDir:u},f=null===(s=e.colliderGroups)||void 0===s?void 0:s.map(e=>{let i=null==p?void 0:p[e];if(null==i)throw Error(`VRMSpringBoneLoaderPlugin: The spring #${t} attempted to use a colliderGroup ${e} but not found`);return i});l.traverse(e=>{var t;let i=null!==(t=e.children[0])&&void 0!==t?t:null,n=this._importJoint(e,i,m,f);c&&(n.center=c),d.addJoint(n)})})}),e.scene.updateMatrixWorld(),d.setInitState(),d})}_importJoint(e,t,i,n){let r=new VRMSpringBoneJoint(e,t,i,n);if(this.jointHelperRoot){let e=new VRMSpringBoneJointHelper(r);this.jointHelperRoot.add(e),e.renderOrder=this.jointHelperRoot.renderOrder}return r}_importSphereCollider(e,t){let{offset:i,radius:n}=t,r=new VRMSpringBoneColliderShapeSphere({offset:i,radius:n}),o=new VRMSpringBoneCollider(r);if(e.add(o),this.colliderHelperRoot){let e=new VRMSpringBoneColliderHelper(o);this.colliderHelperRoot.add(e),e.renderOrder=this.colliderHelperRoot.renderOrder}return o}_importCapsuleCollider(e,t){let{offset:i,radius:n,tail:r}=t,o=new VRMSpringBoneColliderShapeCapsule({offset:i,radius:n,tail:r}),a=new VRMSpringBoneCollider(o);if(e.add(a),this.colliderHelperRoot){let e=new VRMSpringBoneColliderHelper(a);this.colliderHelperRoot.add(e),e.renderOrder=this.colliderHelperRoot.renderOrder}return a}};VRMSpringBoneLoaderPlugin.EXTENSION_NAME="VRMC_springBone";let VRMLoaderPlugin=class VRMLoaderPlugin{get name(){return"VRMLoaderPlugin"}constructor(e,t){var i,n,r,o,a,s,l,u,d,h;this.parser=e;let p=null==t?void 0:t.helperRoot,c=null==t?void 0:t.autoUpdateHumanBones;this.expressionPlugin=null!==(i=null==t?void 0:t.expressionPlugin)&&void 0!==i?i:new VRMExpressionLoaderPlugin(e),this.firstPersonPlugin=null!==(n=null==t?void 0:t.firstPersonPlugin)&&void 0!==n?n:new VRMFirstPersonLoaderPlugin(e),this.humanoidPlugin=null!==(r=null==t?void 0:t.humanoidPlugin)&&void 0!==r?r:new VRMHumanoidLoaderPlugin(e,{helperRoot:p,autoUpdateHumanBones:c}),this.lookAtPlugin=null!==(o=null==t?void 0:t.lookAtPlugin)&&void 0!==o?o:new VRMLookAtLoaderPlugin(e,{helperRoot:p}),this.metaPlugin=null!==(a=null==t?void 0:t.metaPlugin)&&void 0!==a?a:new VRMMetaLoaderPlugin(e),this.mtoonMaterialPlugin=null!==(s=null==t?void 0:t.mtoonMaterialPlugin)&&void 0!==s?s:new MToonMaterialLoaderPlugin(e),this.materialsHDREmissiveMultiplierPlugin=null!==(l=null==t?void 0:t.materialsHDREmissiveMultiplierPlugin)&&void 0!==l?l:new VRMMaterialsHDREmissiveMultiplierLoaderPlugin(e),this.materialsV0CompatPlugin=null!==(u=null==t?void 0:t.materialsV0CompatPlugin)&&void 0!==u?u:new VRMMaterialsV0CompatPlugin(e),this.springBonePlugin=null!==(d=null==t?void 0:t.springBonePlugin)&&void 0!==d?d:new VRMSpringBoneLoaderPlugin(e,{colliderHelperRoot:p,jointHelperRoot:p}),this.nodeConstraintPlugin=null!==(h=null==t?void 0:t.nodeConstraintPlugin)&&void 0!==h?h:new VRMNodeConstraintLoaderPlugin(e,{helperRoot:p})}beforeRoot(){return __awaiter$5(this,void 0,void 0,function*(){yield this.materialsV0CompatPlugin.beforeRoot(),yield this.mtoonMaterialPlugin.beforeRoot()})}loadMesh(e){return __awaiter$5(this,void 0,void 0,function*(){return yield this.mtoonMaterialPlugin.loadMesh(e)})}getMaterialType(e){let t=this.mtoonMaterialPlugin.getMaterialType(e);return null!=t?t:null}extendMaterialParams(e,t){return __awaiter$5(this,void 0,void 0,function*(){yield this.materialsHDREmissiveMultiplierPlugin.extendMaterialParams(e,t),yield this.mtoonMaterialPlugin.extendMaterialParams(e,t)})}afterRoot(e){return __awaiter$5(this,void 0,void 0,function*(){yield this.metaPlugin.afterRoot(e),yield this.humanoidPlugin.afterRoot(e),yield this.expressionPlugin.afterRoot(e),yield this.lookAtPlugin.afterRoot(e),yield this.firstPersonPlugin.afterRoot(e),yield this.springBonePlugin.afterRoot(e),yield this.nodeConstraintPlugin.afterRoot(e),yield this.mtoonMaterialPlugin.afterRoot(e);let t=e.userData.vrmMeta,i=e.userData.vrmHumanoid;if(t&&i){let n=new VRM({scene:e.scene,expressionManager:e.userData.vrmExpressionManager,firstPerson:e.userData.vrmFirstPerson,humanoid:i,lookAt:e.userData.vrmLookAt,meta:t,materials:e.userData.vrmMToonMaterials,springBoneManager:e.userData.vrmSpringBoneManager,nodeConstraintManager:e.userData.vrmNodeConstraintManager});e.userData.vrm=n}})}};function disposeMaterial(e){if(Object.values(e).forEach(e=>{(null==e?void 0:e.isTexture)&&e.dispose()}),e.isShaderMaterial){let t=e.uniforms;t&&Object.values(t).forEach(e=>{let t=e.value;(null==t?void 0:t.isTexture)&&t.dispose()})}e.dispose()}function dispose(e){let t=e.geometry;t&&t.dispose();let i=e.skeleton;i&&i.dispose();let n=e.material;n&&(Array.isArray(n)?n.forEach(e=>disposeMaterial(e)):n&&disposeMaterial(n))}let VRMUtils=class VRMUtils{constructor(){}};VRMUtils.deepDispose=function(e){e.traverse(dispose)},VRMUtils.removeUnnecessaryJoints=function(e){let t=new Map;e.traverse(e=>{if("SkinnedMesh"!==e.type)return;let i=e.geometry,r=i.getAttribute("skinIndex"),o=t.get(r);if(!o){let i=[],a=[],s={},l=r.array;for(let t=0;t<l.length;t++){let n=l[t];void 0===s[n]&&(s[n]=i.length,i.push(e.skeleton.bones[n]),a.push(e.skeleton.boneInverses[n])),l[t]=s[n]}r.copyArray(l),r.needsUpdate=!0,o=new n.OdW(i,a),t.set(r,o)}e.bind(o,new n.yGw)})},VRMUtils.removeUnnecessaryVertices=function(e){let t=new Map;e.traverse(e=>{var i,r,o,a;if(!e.isMesh)return;let s=e.geometry,l=s.index;if(null==l)return;let u=t.get(s);if(null!=u){e.geometry=u;return}let d=new n.u9r;d.name=s.name,d.morphTargetsRelative=s.morphTargetsRelative,s.groups.forEach(e=>{d.addGroup(e.start,e.count,e.materialIndex)}),d.boundingBox=null!==(r=null===(i=s.boundingBox)||void 0===i?void 0:i.clone())&&void 0!==r?r:null,d.boundingSphere=null!==(a=null===(o=s.boundingSphere)||void 0===o?void 0:o.clone())&&void 0!==a?a:null,d.setDrawRange(s.drawRange.start,s.drawRange.count),d.userData=s.userData,t.set(s,d);let h=[],p=[];{let e=l.array,t=new e.constructor(e.length),i=0;for(let n=0;n<e.length;n++){let r=e[n],o=h[r];null==o&&(h[r]=i,p[i]=r,o=i,i++),t[n]=o}d.setIndex(new n.TlE(t,1,!1))}Object.keys(s.attributes).forEach(e=>{let t=s.attributes[e];if(t.isInterleavedBufferAttribute)throw Error("removeUnnecessaryVertices: InterleavedBufferAttribute is not supported");let i=t.array,{itemSize:r,normalized:o}=t,a=new i.constructor(p.length*r);p.forEach((e,t)=>{for(let n=0;n<r;n++)a[t*r+n]=i[e*r+n]}),d.setAttribute(e,new n.TlE(a,r,o))});let c=!0;Object.keys(s.morphAttributes).forEach(e=>{d.morphAttributes[e]=[];let t=s.morphAttributes[e];for(let i=0;i<t.length;i++){let r=t[i];if(r.isInterleavedBufferAttribute)throw Error("removeUnnecessaryVertices: InterleavedBufferAttribute is not supported");let o=r.array,{itemSize:a,normalized:s}=r,l=new o.constructor(p.length*a);p.forEach((e,t)=>{for(let i=0;i<a;i++)l[t*a+i]=o[e*a+i]}),c=c&&l.every(e=>0===e),d.morphAttributes[e][i]=new n.TlE(l,a,s)}}),c&&(d.morphAttributes={}),e.geometry=d}),Array.from(t.keys()).forEach(e=>{e.dispose()})},VRMUtils.rotateVRM0=function(e){var t;(null===(t=e.meta)||void 0===t?void 0:t.metaVersion)==="0"&&(e.scene.rotation.y=Math.PI)}}}]);