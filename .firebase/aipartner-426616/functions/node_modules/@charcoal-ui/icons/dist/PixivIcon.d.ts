import type React from 'react';
import { KnownIconFile } from './charcoalIconFiles';
export interface KnownIconType extends Record<KnownIconFile, unknown> {
}
export interface Props extends Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>, 'className' | 'css'> {
    name: keyof KnownIconType;
    scale?: 1 | 2 | 3 | '1' | '2' | '3';
    'unsafe-non-guideline-scale'?: number | string;
    class?: string;
}
type ExtendedIconFile = Exclude<keyof KnownIconType, KnownIconFile>;
type Extended = [ExtendedIconFile] extends [never] ? false : true;
export declare class PixivIcon extends HTMLElement {
    static readonly tagName = "pixiv-icon";
    static extend(map: Extended extends true ? Record<ExtendedIconFile, string> : Record<string, string>): void;
    static get observedAttributes(): readonly ["name", "scale", "unsafe-non-guideline-scale"];
    private svgContent?;
    private observer?;
    private isVisible;
    get props(): {
        name: string;
        scale: string | null;
        "unsafe-non-guideline-scale": string | null;
    };
    get forceResizedSize(): number | null;
    get scaledSize(): number;
    constructor();
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    attributeChangedCallback(attr: string, _oldValue: string | null, newValue: string): void;
    render(): void;
    private loadSvg;
    private waitUntilVisible;
}
export {};
//# sourceMappingURL=PixivIcon.d.ts.map